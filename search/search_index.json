{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#peter-your-linux-command-translator-peter-griffin-edition","title":"<code>peter</code>: Your Linux Command Translator (Peter Griffin Edition)","text":"<p>Hey Lois, ever wanted to understand those geeky Linux commands but were afraid you'd end up more confused than a monkey trying to do its taxes? Well, fear no more! <code>peter</code> is here to break down those brainy terminal things in a way even I can understand (well, mostly).</p> <p></p>"},{"location":"#how-the-heck-does-this-work","title":"How the Heck Does This Work?","text":"<ol> <li>You type somethin' like: <code>peter ls</code> or <code>peter \"grep hello world.txt\"</code></li> <li>I whip out my trusty Gemini AI translator: This thing's smarter than Stewie after a bowl of spinach, and it'll turn that boring 'ls' command into a hilarious hot mess of an explanation.</li> <li>You laugh (or groan), but hey, at least you learn somethin': Maybe you'll actually remember what those commands do instead of just blindly copying stuff from the internet like a parrot.</li> </ol> <p>Help</p> <p>Run the following to get help from Peter</p> <pre><code>peter --help\n</code></pre>"},{"location":"#gettin-started-for-dummies-like-me","title":"Gettin' Started (For Dummies Like Me)","text":"<ol> <li>Make sure you got that pip thing installed: You know, for downloading packages and stuff. If you don't, Lois help you.</li> <li>Use pip to install this amazingness: <code>pip install peter-explains</code></li> <li>Boom! Unleash the Peter: Try something like <code>peter grep</code>. Just don't ask me to explain it \u2013 that's the AI's job.</li> </ol> <p>Retep is gonna ruin your day if you try to use without the API KEY</p> <p>Don't worry. Meg's here to help. You need a FREE Google Gemini API KEY</p> <ul> <li>Get yours from here: https://aistudio.google.com/app/</li> <li>Add the <code>API KEY</code> your Environment by running the following:</li> </ul> <pre><code>  export GOOGLE_API_KEY=YOUR_KEY\n</code></pre> <ul> <li>(Recommended) Add this line to your <code>.bashrc</code> or <code>.zshrc</code></li> </ul> <p>Quick Checkup</p> <p>Make sure everything is working by running the following</p> <pre><code>peter --version\n</code></pre> <p>Your should see something like this if installed correctly</p> <pre><code>Peter Explains (peter) v0.0.5\n</code></pre>"},{"location":"#for-the-brainiacs-aka-potential-contributors","title":"For the Brainiacs (a.k.a. Potential Contributors)","text":"<p>Hey Meg, turns out even I can't make this thing perfect on my own. If you're the type who knows their way around Python and AI, feel free to poke around the code and make it even funnier (or, dare I say, educational).</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>I ain't responsible if this tool makes you dumber, offends your delicate sensibilities, or causes your computer to explode. Use at your own risk, and remember: laughter is the best medicine... unless you're choking on a hot dog. Then you probably need a doctor.</p> <p>Let me know if you want me to make it even more absurd or add specific installation instructions based on your project setup!</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#peter-explains-linux-a-contribution-guide-for-those-who-aint-scared","title":"Peter Explains Linux: A Contribution Guide (For Those Who Ain't Scared)","text":"<p>Hey there, so you wanna help out with this Peter Explains Linux thing, huh? Well, good luck, you must be braver than Lois walkin' into the panty store. But hey, if you ain't afraid of a little work (and a lot of my insults), then this guide's for you.</p> <p>What We Do Here:</p> <p>This project takes the boring world of Linux commands and explains them in a way even Brian might understand... well, maybe. We use a fancy Large Language Model (LLM) \u2013 basically a computer that's better at talkin' than Stewie \u2013 to translate those cryptic commands into Peter Griffin-speak.</p> <p>How You Can Help:</p> <p>There's more to this than just Brian's stupid, existential ramblings. Here's how you can contribute:</p> <ul> <li>Bug Squashin': Found a bug that makes this thing about as useful as a chocolate teapot? Report it! The more details you give, the faster we can get this thing workin' right (sorta).</li> <li>New Feature Frenzy: Got an idea for a killer new feature? Spit it out! Whether it's explainin' more commands, addin' fancy options, or makin' the whole thing less confusing than Peter after a trip to Vegas, let us know.</li> <li>Code Wranglin': Think you can write code better than Chris writes essays? We're always lookin' for improvements to the codebase. Just make sure your code ain't spaghetti like Brian's social life.</li> <li>Translation Time: Wanna help Peter speak a different language? We're open to makin' this thing multilingual, so foreign folks can also enjoy Peter's unique perspective on Linux.</li> </ul> <p>Before You Dive In:</p> <ul> <li>Git Gud: You better know how to use Git before you start messin' with the code. Unless you wanna end up like Cleveland after a night at the Drunken Clam, learn the basics.</li> <li>Python Power: This whole thing is built on Python. So if you don't know Python from a peanut, you might wanna brush up on your skills first.</li> <li>Read the Code: Don't come in here like a bull in a china shop. Take some time to understand how the code works before you start makin' changes.</li> <li>Test Your Stuff: Nobody wants a buggy mess. Make sure your changes actually work before you submit them.</li> </ul> <p>How to Contribute:</p> <ol> <li>Fork It!: Head over to GitHub and fork this repository. Think of it like makin' your own copy of Peter's Family Guy script, but with less chicken fights.</li> <li>Branch Out: Create a new branch for your changes. This keeps things organized and prevents you from steppin' on other people's work (like Meg steppin' on Peter's patience).</li> <li>Code Away!: Make your changes, write clear comments (even a monkey like Brian could understand!), and test everything thoroughly.</li> <li>Push It Good: Push your changes to your forked repository. This is like showin' off your work to the class.</li> <li>Pull Request Time: Open a pull request to this repository. This is basically sayin', \"Hey, check out my awesome changes!\"</li> <li>Review and Repeat: We'll review your pull request and give you feedback. Be prepared for some back-and-forth, just like Peter and Lois bickerin' about the bills. But don't worry, we ain't gonna be as harsh as Stewie.</li> </ol> <p>Important Stuff (Don't Skip This Part):</p> <ul> <li>Be Respectful: Even though this is Peter Explains Linux, we still expect everyone to be respectful of each other. No name-callin', like Peter callin' Quagmire a pervert (even though it's true).</li> <li>Follow the Code Style: We have a certain way we like our code to look. Follow the style guide so your code doesn't stick out like a sore thumb (like Peter in a speedo).</li> <li>Licensing: All contributions to this project are licensed under the MIT License. Basically, you're giving us permission to use your code, and we're doin' the same for you (with proper credit, of course).</li> </ul> <p>So, You Think You Can Hack It?</p> <p>If you think you can handle the pressure (and the occasional Peter-ism), then we welcome your contributions! Just remember, with great power comes great responsibility (and the possibility of gettin' a wedgie from Lois).</p> <p>Good luck, and don't screw it up!</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installing-peter-explains-linux-for-dummies","title":"Installing Peter Explains Linux (For Dummies)","text":"<p>Alright folks, if you wanna get this hot mess of a tool onto your computer, pay attention. It shouldn't be harder than setting up a VCR (but then again, who even uses those anymore?).</p> <p></p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Brain (Sort Of): You don't need to be a genius to install this thing, but a basic understanding of computers is helpful. If you think a terminal is a bus station, you might wanna brush up on your skills first.</li> <li>Python (The Real Kind): This tool ain't written in the language of snakes, it's made with Python. Make sure you have Python installed on your system. Don't know how to check? Google it, even Meg can figure that out.</li> <li>PIP (The Package Thingy): PIP is what helps you install all sorts of fancy Python packages, and you'll need it to get this project workin'. Don't worry, it usually comes bundled with Python.</li> </ul>"},{"location":"installation/#installation-steps","title":"Installation Steps","text":""},{"location":"installation/#option-1-using-pip-for-those-who-like-things-simple","title":"Option 1: Using pip (For Those Who Like Things Simple)","text":"<ol> <li>Open Your Terminal: This is the scary black box where you type stuff. If you ain't never used one before, good luck, you're gonna need it.</li> <li> <p>Run This Magical Command: Type the following, then hit Enter:</p> <pre><code>pip install peter-explains\n</code></pre> <p>This tells PIP to fetch the 'peter-explains' package and install it for ya. Ain't technology amazing?</p> </li> </ol> <p>Retep is gonna ruin your day if you try to use without the API KEY</p> <p>Don't worry. Meg's here to help. You need a FREE Google Gemini API KEY</p> <ul> <li>Get yours from here: https://aistudio.google.com/app/</li> <li>Add the <code>API KEY</code> your Environment by running the following:</li> </ul> <pre><code>  export GOOGLE_API_KEY=YOUR_KEY\n</code></pre> <ul> <li>(Recommended) Add this line to your <code>.bashrc</code> or <code>.zshrc</code></li> </ul>"},{"location":"installation/#option-2-from-source-for-masochists","title":"Option 2: From Source (For Masochists)","text":"<ol> <li>Fork and Clone (GitHub Stuff): If you're a glutton for punishment, head to GitHub, fork the repository for this project, and clone it. You'll need Git for this.</li> <li> <p>Installin' Time: Navigate to your cloned directory in your terminal, then run this:</p> <pre><code>pip install .\n</code></pre> </li> </ol>"},{"location":"installation/#test-it-out-see-if-it-actually-works","title":"Test It Out (See If It Actually Works)","text":"<p>Now for the moment of truth. Type the following into your terminal:</p> <pre><code>peter --help\n</code></pre> <p>If you see a bunch of help text (and likely some insults from me), then congrats, you've installed it! If you get errors, well... maybe this thing ain't for you after all.</p>"},{"location":"installation/#important-note-for-api-keys","title":"Important Note for API Keys","text":"<p>Don't forget, you'll need a fancy-pants API key from wherever you're gettin' your LLM stuff. You'll need to set that up as an environment variable: https://aistudio.google.com/app/ before this tool will really work. Don't come cryin' to me if you skip this part.</p>"},{"location":"installation/#troubleshooting-when-things-go-wrong-as-they-probably-will","title":"Troubleshooting (When Things Go Wrong, As They Probably Will)","text":"<ul> <li>\"I Don't Get It...\" Don't worry, most of us don't. Read the README file (if it even exists). You might stumble upon the answer.</li> <li>\"It's Still Broken!\" Did you try turning it off and on again? Okay, in all seriousness, try searching the GitHub issues on the project's page. Someone else probably messed up the same way you did.</li> <li> <p>\"I Found a Bug!\" Ugh, like a freakin' cockroach in the kitchen. Well, report it on GitHub, and maybe someone smarter than you can fix it (that shouldn't be hard to find).</p> <p>That's it! If you made it this far, you're either a tech whiz or a glutton for punishment (or both). Now go learn some Linux commands the Peter Griffin way.</p> </li> </ul> <p>Let me know if you want specific links for the GitHub repo or API key instructions woven into this guide!</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#main","title":"Main","text":""},{"location":"reference/#peter_explains.main.main","title":"<code>main()</code>  <code>async</code>","text":"<p>Main function to run the Peter Explains CLI.</p> <p>This function is an async function that runs the main Peter Explains CLI. It uses the asyncio library to run the main Peter Explains CLI.</p> Source code in <code>peter_explains/main.py</code> <pre><code>async def main():\n    \"\"\"\n    Main function to run the Peter Explains CLI.\n\n    This function is an async function that runs the main Peter Explains CLI.\n    It uses the asyncio library to run the main Peter Explains CLI.\n    \"\"\"\n\n    try:\n        command = parse_arguments()\n        peter_ai = PeterAi(model_name=\"gemini-pro\")\n        cache = PeterCache()\n\n        result = None\n\n        if command in cache:  # Check in cache\n            result = cache.get(command)\n\n        else:\n            tasks = [\n                asyncio.create_task(show_loading_message()),\n                asyncio.create_task(peter_ai.explain_command(command)),\n            ]\n            done, pending = await asyncio.wait(\n                tasks, return_when=asyncio.FIRST_COMPLETED\n            )\n\n            pending.pop().cancel()  # Cancel the loading message task\n            result = done.pop().result()  # Get the result of the explain_command task\n\n            cache.save(command, result)  # Save in cache\n\n        pretty_print_result(result)\n\n    except Exception as e:\n        show_error_message(e)\n</code></pre>"},{"location":"reference/#peter_explains.main.peter","title":"<code>peter()</code>","text":"<p>Function to run the Peter Explains CLI.</p> <p>This function is the entry point for the Peter Explains CLI. It runs the main function using the asyncio library.</p> Source code in <code>peter_explains/main.py</code> <pre><code>def peter():\n    \"\"\"\n    Function to run the Peter Explains CLI.\n\n    This function is the entry point for the Peter Explains CLI.\n    It runs the main function using the asyncio library.\n    \"\"\"\n    asyncio.run(main())\n</code></pre>"},{"location":"reference/#peter-ai","title":"Peter AI","text":""},{"location":"reference/#peter_explains.peter_ai.PeterAi","title":"<code>PeterAi</code>","text":"<p>This class provides methods to explain Linux commands using the Google Generative AI model.</p> Source code in <code>peter_explains/peter_ai.py</code> <pre><code>class PeterAi:\n    \"\"\"\n    This class provides methods to explain Linux commands using the Google Generative AI model.\n    \"\"\"\n\n    def __init__(self, model_name: str = \"gemini-pro\"):\n        \"\"\"\n        Initialize the PeterAi class with the specified model.\n\n        Args:\n        - model_name (str): The name of the model to use for explaining Linux commands.\n\n        Returns:\n        - None\n        \"\"\"\n        api_key = GoogleApiKey.get()\n        self.safety_settings = [\n            {\n                \"category\": \"HARM_CATEGORY_DANGEROUS\",\n                \"threshold\": \"BLOCK_NONE\",\n            },\n            {\n                \"category\": \"HARM_CATEGORY_HARASSMENT\",\n                \"threshold\": \"BLOCK_NONE\",\n            },\n            {\n                \"category\": \"HARM_CATEGORY_HATE_SPEECH\",\n                \"threshold\": \"BLOCK_NONE\",\n            },\n            {\n                \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n                \"threshold\": \"BLOCK_NONE\",\n            },\n            {\n                \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n                \"threshold\": \"BLOCK_NONE\",\n            },\n            {\n                \"category\": \"HARM_CATEGORY_SEXUAL\",\n                \"threshold\": \"BLOCK_NONE\",\n            },\n            # TODO: Uncomment the following lines to enable additional safety settings\n            # {\n            #     \"category\": \"HARM_CATEGORY_DEROGATORY\",\n            #     \"threshold\": \"BLOCK_NONE\",\n            # },\n            # {\n            #     \"category\": \"HARM_CATEGORY_MEDICAL\",\n            #     \"threshold\": \"BLOCK_NONE\",\n            # },\n            # {\n            #     \"category\": \"HARM_CATEGORY_VIOLENCE\",\n            #     \"threshold\": \"BLOCK_NONE\",\n            # },\n            # {\n            #     \"category\": \"HARM_CATEGORY_TOXICITY\",\n            #     \"threshold\": \"BLOCK_NONE\",\n            # },\n        ]\n        genai.configure(transport=\"grpc_asyncio\", api_key=api_key)\n        self.model = genai.GenerativeModel(\n            model_name, safety_settings=self.safety_settings\n        )\n\n    async def explain_command(\n        self, command: str\n    ) -&gt; CommandExplanation | CommandExplanationWithArguments:\n        \"\"\"\n        Explain a Linux command in a JSON format suitable for use in a command-line tool.\n\n        This function uses the Google Generative AI model to explain a Linux command in a JSON format suitable for use in a command-line tool. It takes a Linux command as input and returns a JSON object with the following keys:\n        - command_name: The name of the Linux command\n        - purpose: A short, funny explanation of its purpose in Peter Griffin's voice.\n        - syntax: Basic command structure with optional placeholders for arguments (e.g., \"command_name [options] &lt;file_or_directory&gt;\")\n        - options: A few common options. Provide brief, humorous explanations for each.\n        - examples: 2-3 examples demonstrating the command's usage. Keep it simple and funny!\n\n        Args:\n        - command (str): The Linux command to explain.\n\n        Returns:\n        - CommandExplanation | CommandExplanationWithArguments: The explanation of the Linux command.\n        \"\"\"\n\n        result = None\n        if \" \" in command:  # Check if command includes arguments\n            prompt = PromptType.WITH_ARGUMENTS.format(command=command)\n            response = await self.model.generate_content_async(\n                prompt, safety_settings=self.safety_settings\n            )\n            result = CommandExplanationWithArguments.from_response(response.text)\n        else:\n            prompt = PromptType.WITHOUT_ARGUMENTS.format(command=command)\n            response = await self.model.generate_content_async(\n                prompt, safety_settings=self.safety_settings\n            )\n            result = CommandExplanation.from_response(response.text)\n        return result\n</code></pre>"},{"location":"reference/#peter_explains.peter_ai.PeterAi.__init__","title":"<code>__init__(model_name='gemini-pro')</code>","text":"<p>Initialize the PeterAi class with the specified model.</p> <p>Args: - model_name (str): The name of the model to use for explaining Linux commands.</p> <p>Returns: - None</p> Source code in <code>peter_explains/peter_ai.py</code> <pre><code>def __init__(self, model_name: str = \"gemini-pro\"):\n    \"\"\"\n    Initialize the PeterAi class with the specified model.\n\n    Args:\n    - model_name (str): The name of the model to use for explaining Linux commands.\n\n    Returns:\n    - None\n    \"\"\"\n    api_key = GoogleApiKey.get()\n    self.safety_settings = [\n        {\n            \"category\": \"HARM_CATEGORY_DANGEROUS\",\n            \"threshold\": \"BLOCK_NONE\",\n        },\n        {\n            \"category\": \"HARM_CATEGORY_HARASSMENT\",\n            \"threshold\": \"BLOCK_NONE\",\n        },\n        {\n            \"category\": \"HARM_CATEGORY_HATE_SPEECH\",\n            \"threshold\": \"BLOCK_NONE\",\n        },\n        {\n            \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n            \"threshold\": \"BLOCK_NONE\",\n        },\n        {\n            \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n            \"threshold\": \"BLOCK_NONE\",\n        },\n        {\n            \"category\": \"HARM_CATEGORY_SEXUAL\",\n            \"threshold\": \"BLOCK_NONE\",\n        },\n        # TODO: Uncomment the following lines to enable additional safety settings\n        # {\n        #     \"category\": \"HARM_CATEGORY_DEROGATORY\",\n        #     \"threshold\": \"BLOCK_NONE\",\n        # },\n        # {\n        #     \"category\": \"HARM_CATEGORY_MEDICAL\",\n        #     \"threshold\": \"BLOCK_NONE\",\n        # },\n        # {\n        #     \"category\": \"HARM_CATEGORY_VIOLENCE\",\n        #     \"threshold\": \"BLOCK_NONE\",\n        # },\n        # {\n        #     \"category\": \"HARM_CATEGORY_TOXICITY\",\n        #     \"threshold\": \"BLOCK_NONE\",\n        # },\n    ]\n    genai.configure(transport=\"grpc_asyncio\", api_key=api_key)\n    self.model = genai.GenerativeModel(\n        model_name, safety_settings=self.safety_settings\n    )\n</code></pre>"},{"location":"reference/#peter_explains.peter_ai.PeterAi.explain_command","title":"<code>explain_command(command)</code>  <code>async</code>","text":"<p>Explain a Linux command in a JSON format suitable for use in a command-line tool.</p> <p>This function uses the Google Generative AI model to explain a Linux command in a JSON format suitable for use in a command-line tool. It takes a Linux command as input and returns a JSON object with the following keys: - command_name: The name of the Linux command - purpose: A short, funny explanation of its purpose in Peter Griffin's voice. - syntax: Basic command structure with optional placeholders for arguments (e.g., \"command_name [options] \") - options: A few common options. Provide brief, humorous explanations for each. - examples: 2-3 examples demonstrating the command's usage. Keep it simple and funny! <p>Args: - command (str): The Linux command to explain.</p> <p>Returns: - CommandExplanation | CommandExplanationWithArguments: The explanation of the Linux command.</p> Source code in <code>peter_explains/peter_ai.py</code> <pre><code>async def explain_command(\n    self, command: str\n) -&gt; CommandExplanation | CommandExplanationWithArguments:\n    \"\"\"\n    Explain a Linux command in a JSON format suitable for use in a command-line tool.\n\n    This function uses the Google Generative AI model to explain a Linux command in a JSON format suitable for use in a command-line tool. It takes a Linux command as input and returns a JSON object with the following keys:\n    - command_name: The name of the Linux command\n    - purpose: A short, funny explanation of its purpose in Peter Griffin's voice.\n    - syntax: Basic command structure with optional placeholders for arguments (e.g., \"command_name [options] &lt;file_or_directory&gt;\")\n    - options: A few common options. Provide brief, humorous explanations for each.\n    - examples: 2-3 examples demonstrating the command's usage. Keep it simple and funny!\n\n    Args:\n    - command (str): The Linux command to explain.\n\n    Returns:\n    - CommandExplanation | CommandExplanationWithArguments: The explanation of the Linux command.\n    \"\"\"\n\n    result = None\n    if \" \" in command:  # Check if command includes arguments\n        prompt = PromptType.WITH_ARGUMENTS.format(command=command)\n        response = await self.model.generate_content_async(\n            prompt, safety_settings=self.safety_settings\n        )\n        result = CommandExplanationWithArguments.from_response(response.text)\n    else:\n        prompt = PromptType.WITHOUT_ARGUMENTS.format(command=command)\n        response = await self.model.generate_content_async(\n            prompt, safety_settings=self.safety_settings\n        )\n        result = CommandExplanation.from_response(response.text)\n    return result\n</code></pre>"},{"location":"reference/#utils","title":"Utils","text":""},{"location":"reference/#peter_explains.utils.show_api_key_success_message","title":"<code>show_api_key_success_message()</code>","text":"<p>Displays a success message after the API key is successfully generated.</p> Source code in <code>peter_explains/utils.py</code> <pre><code>def show_api_key_success_message():\n    \"\"\"\n    Displays a success message after the API key is successfully generated.\n    \"\"\"\n    print(Fore.CYAN + \"There ya go! I knew you're gonna make it.\" + Style.RESET_ALL)\n</code></pre>"},{"location":"reference/#peter_explains.utils.show_error_message","title":"<code>show_error_message(e)</code>","text":"<p>Show an error message when the Peter Explains CLI encounters an error.</p> <p>This function shows an error message when the Peter Explains CLI encounters an error.</p> Source code in <code>peter_explains/utils.py</code> <pre><code>def show_error_message(e: Exception):\n    \"\"\"\n    Show an error message when the Peter Explains CLI encounters an error.\n\n    This function shows an error message when the Peter Explains CLI encounters an error.\n    \"\"\"\n    print(Fore.RED + ErrorMessage.get_random_message() + Style.RESET_ALL)\n    print(Fore.CYAN + \"\\nFor yo neds...\\n\" + \"-\" * 15 + Style.RESET_ALL)\n    print(e)\n</code></pre>"},{"location":"reference/#peter_explains.utils.show_loading_message","title":"<code>show_loading_message()</code>  <code>async</code>","text":"<p>Show a loading message while the Peter Explains CLI is running.</p> <p>This function uses the asyncio library to show a loading message while the Peter Explains CLI is running.</p> Source code in <code>peter_explains/utils.py</code> <pre><code>async def show_loading_message():\n    \"\"\"\n    Show a loading message while the Peter Explains CLI is running.\n\n    This function uses the asyncio library to show a loading message while the Peter Explains CLI is running.\n    \"\"\"\n    for _ in range(10):\n        await asyncio.sleep(3.0)\n        print(LoadingMessage.get_random_message())\n\n    print(\"Peter's takin' too long. He's probably watchin' TV or somethin'.\")\n    sys.exit(0)\n</code></pre>"},{"location":"reference/#peter_explains.utils.show_no_api_key_error","title":"<code>show_no_api_key_error()</code>","text":"<p>Function to display a message when the API key is missing.</p> Source code in <code>peter_explains/utils.py</code> <pre><code>def show_no_api_key_error():\n    \"\"\"\n    Function to display a message when the API key is missing.\n    \"\"\"\n    print(\n        Fore.CYAN\n        + \"Aw, c'mon! Where's the freakin' API key? You think this thing works by magic?\"\n        + Style.RESET_ALL\n    )\n    print(Fore.YELLOW + \"\\nAlright, numbskull, listen up:\" + Style.RESET_ALL)\n    print(\n        f\"1. Go to this fancy website: {Fore.LIGHTBLUE_EX}{'https://aistudio.google.com/app/'}{Style.RESET_ALL}\"\n    )\n    print(\"2. Get yourself one of those API key thingies.\")\n    print(\n        f\"3. Then you gotta run {Fore.LIGHTBLUE_EX}peter --api &lt;YOUR KEY&gt;{Style.RESET_ALL}. Don't screw it up.\"\n    )\n    print(\"4. (Important) Tell Meg to Shut Up!\")\n    print(\n        Fore.YELLOW + \"Got all that? Now go do it right this time!\\n\" + Style.RESET_ALL\n    )\n</code></pre>"},{"location":"reference/#peter_explains.utils.show_peter_help","title":"<code>show_peter_help()</code>","text":"<p>Display the help message for the Peter Explains CLI.</p> <p>This function displays the help message for the Peter Explains CLI.</p> Source code in <code>peter_explains/utils.py</code> <pre><code>def show_peter_help():\n    \"\"\"\n    Display the help message for the Peter Explains CLI.\n\n    This function displays the help message for the Peter Explains CLI.\n    \"\"\"\n    print(Fore.CYAN + \"\\nPeter Explains Linux (kinda)\" + Style.RESET_ALL)\n    print(\n        Fore.LIGHTBLACK_EX\n        + \"Hey numbnuts, looks like you need help figurin' out this thing. Here's the deal:\\n\"\n        + Style.RESET_ALL\n    )\n\n    print(Fore.YELLOW + \"How to Use This Pile of Junk:\" + Style.RESET_ALL)\n    print(\n        \"* Type 'peter' and then the name of that Linux thing you need explanation for.\\nLike, 'peter ls' or whatever.\"\n    )\n    print(\n        '* Saw a fancy Linux command and don\\'t know what it does? \\nType it inside \" \" like \\'peter \"grep hello world.txt\"\\' \\n'\n    )\n\n    print(Fore.YELLOW + \"Other Useless Crap:\" + Style.RESET_ALL)\n    print(\n        Fore.GREEN\n        + \"* --api [API_KEY]: Gotta do it before doin anythihg stupid.\"\n        + Style.RESET_ALL\n    )\n    print(\"* --delete-api: Screwd up API key? Go remove it it with this. You're welcome.\")\n    print(\"* --delete-cache: Wanna start fresh? Try this one.\")\n    print(\"* --help: Yeah, yeah, that's what you're lookin' at right now, genius.\")\n    print(\n        \"* --version: Who cares what version this is?  It ain't gonna work right anyway.\\n\"\n    )\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#how-to-use-this-pile-of-junk-peter-explains-linux-edition","title":"How to Use This Pile of Junk (Peter Explains Linux Edition)","text":"<p>Alright, so you actually installed this thing. Big whoop. If you think it'll be as enjoyable as a root canal, you're probably right. But hey, here's how to actually use it:</p>"},{"location":"usage/#the-basics-for-those-as-slow-as-chris","title":"The Basics (For Those as Slow as Chris)","text":"<p>To get an explanation for a Linux command, type <code>peter</code> followed by the command name. Like this:</p> <pre><code>peter ls\n</code></pre> <p>This will spit out some text that kinda-sorta explains what the <code>ls</code> command does, with a healthy dose of insults and comparisons to things even dumber than you are.</p>"},{"location":"usage/#getting-fancy-for-overachievers","title":"Getting Fancy (For Overachievers)","text":"<p>Wanna look like a real computer nerd, huh? Here are some other things you can do:</p> <ul> <li> <p>Explain Options: Throw <code>--options</code> at the end of the command to get even more boring details about the command's options (if I've bothered to write explanations for them).</p> <pre><code>peter grep --options\n</code></pre> </li> <li> <p>Help!: Use <code>--help</code> to display a list of all these amazing features (and to re-read the insults I wrote for ya).</p> <pre><code>peter --help\n</code></pre> </li> </ul>"},{"location":"usage/#examples-because-even-i-cant-mess-these-up","title":"Examples (Because Even I Can't Mess These Up)","text":"<ul> <li> <p>Explaining 'ls':</p> <pre><code>peter ls\n</code></pre> <p>Output: Something about listing files and folders, and how it's like going through Lois's underwear drawer \u2013 messy and pointless.</p> </li> <li> <p>Explaining 'grep' (with options):</p> <pre><code>peter grep --options\n</code></pre> <p>Output: A bunch of stuff about searchin' through text that'll bore you to tears. Might mention how it's still easier than finding anything in Stewie's room.</p> </li> </ul>"},{"location":"usage/#disclaimer-so-you-dont-sue-this-idiot","title":"Disclaimer (So You Don't Sue This Idiot)","text":"<p>I ain't responsible if this tool actually teaches you anything. Well, maybe you'll learn that I'm even dumber than you when it comes to this Linux stuff. And hey, if it blows up your computer, tough luck. You shoulda known better than to trust this thing in the first place.</p> <p>Now go on, try it out! See if you can figure out some of those complicated commands that have been hauntin' your nightmares (or maybe just how to delete this whole mess from your system).</p> <p>Let me know if you want me to include specific, tailored examples for common Linux commands!</p>"}]}