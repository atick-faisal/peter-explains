{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#peter-your-linux-command-translator-peter-griffin-edition","title":"<code>peter</code>: Your Linux Command Translator (Peter Griffin Edition)","text":"<p>Hey Lois, ever wanted to understand those geeky Linux commands but were afraid you'd end up more confused than a monkey trying to do its taxes? Well, fear no more! <code>peter</code> is here to break down those brainy terminal things in a way even I can understand (well, mostly).</p> <p></p>"},{"location":"#how-the-heck-does-this-work","title":"How the Heck Does This Work?","text":"<ol> <li>You type somethin' like: <code>peter ls</code> or <code>peter \"grep hello world.txt\"</code></li> <li>I whip out my trusty Gemini AI translator: This thing's smarter than Stewie after a bowl of spinach, and it'll turn that boring command into a hilarious hot mess of an explanation.</li> <li>You laugh (or groan), but hey, at least you learn somethin': Maybe you'll actually remember what those commands do instead of just blindly copying stuff from the internet like a parrot.</li> </ol>"},{"location":"#gettin-started-for-dummies-like-me","title":"Gettin' Started (For Dummies Like Me)","text":"<ol> <li>Make sure you got that pip thing installed: You know, for downloading packages and stuff.</li> <li>Use pip to install this amazingness: <pre><code>$ pip install peter-explains\n</code></pre></li> <li>Set the API Key: Get one o those for free from here. The run: <pre><code>$ peter --api &lt;YOUR_API_KEY&gt;\n$ peter --api &lt;YOUR_CORRECT_API_KEY&gt;\n</code></pre></li> <li>Boom! Unleash the Peter: Try something like <code>peter grep</code>. Just don't ask me to explain it \u2013 that's the AI's job.</li> <li>Too Slow? I know. This thing can be slow at first. But try running the same command again. See that? That's the magic of cache.</li> </ol> <p>Tip</p> <p>Confused about what a fancy-ass command does? Put em inside <code>\" \"</code> after peter. I'll handle the rest. <pre><code>$ peter \"find . -name \"node_modules\" -type d -prune -exec rm -rf '{}' +\"\n</code></pre></p> <p>Warning</p> <p>Tip</p> <p>If yo dumbass scews up setting the API key, run the following to delete and try setting it up again. <pre><code>$ peter --delete-api\n</code></pre></p>"},{"location":"#retep-is-gonna-ruin-your-day-if-you-try-to-use-it-without-the-api-key","title":"Retep is gonna ruin your day if you try to use it without the API KEY","text":"<pre><code>Don't worry. Meg's here to help. You need a FREE Google Gemini API KEY.\n\n- Get yours from here: [https://aistudio.google.com/app/](https://aistudio.google.com/app/)\n- Save the `API KEY` to your Environment by running the following:\n\n  $ peter --api &lt;YOUR_API_KEY&gt;\n</code></pre>"},{"location":"#help","title":"Help","text":"<p>Run the following for help. Probally won't help. <pre><code>$ peter --help\n</code></pre> Need more?</p> <p> </p>"},{"location":"#for-the-brainiacs-aka-potential-contributors","title":"For the Brainiacs (a.k.a. Potential Contributors)","text":"<p>Hey Meg, turns out even I can't make this thing perfect on my own. If you're the type who knows their way around Python and AI, feel free to poke around the code and make it even funnier (or, dare I say, educational).</p> <pre><code>$ git clone https://github.com/atick-faisal/peter-explains\n$ cd peter-explains\n$ pip install -r requirements.txt\n$ pip install -r requirements-dev.txt\n$ pip install -e .\n</code></pre> <p>Note</p> <p>Make sure you test your crap before making a PR. I ain't got time for yo buggy code. You're gonna need the API key in your exvironment to run the tests. <pre><code>$ export GOOGLE_API_KEY=&lt;YOUR_API_KEY&gt;\n</code></pre> Run the tests like this: <pre><code>$ pytest\n</code></pre> Don't forget to check your linting before pushing: <pre><code>$ python -m pylint $(git ls-files '*.py') --rcfile .pylintrc\n</code></pre></p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>I ain't responsible if this tool makes you dumber, offends your delicate sensibilities, or causes your computer to explode. Use at your own risk, and remember: laughter is the best medicine... unless you're choking on a hot dog. Then you probably need a doctor.</p> <p>Let me know if you want me to make it even more absurd or add specific installation instructions based on your project setup!</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#peter-explains-linux-a-contribution-guide-for-those-who-aint-scared","title":"Peter Explains Linux: A Contribution Guide (For Those Who Ain't Scared)","text":"<p>Hey there, so you wanna help out with this Peter Explains Linux thing, huh? Well, good luck, you must be braver than Lois walkin' into the panty store. But hey, if you ain't afraid of a little work (and a lot of my insults), then this guide's for you.</p> <p>What We Do Here:</p> <p>This project takes the boring world of Linux commands and explains them in a way even Brian might understand... well, maybe. We use a fancy Large Language Model (LLM) \u2013 basically a computer that's better at talkin' than Stewie \u2013 to translate those cryptic commands into Peter Griffin-speak.</p> <p>How You Can Help:</p> <p>There's more to this than just Brian's stupid, existential ramblings. Here's how you can contribute:</p> <ul> <li>Bug Squashin': Found a bug that makes this thing about as useful as a chocolate teapot? Report it! The more details you give, the faster we can get this thing workin' right (sorta).</li> <li>New Feature Frenzy: Got an idea for a killer new feature? Spit it out! Whether it's explainin' more commands, addin' fancy options, or makin' the whole thing less confusing than Peter after a trip to Vegas, let us know.</li> <li>Code Wranglin': Think you can write code better than Chris writes essays? We're always lookin' for improvements to the codebase. Just make sure your code ain't spaghetti like Brian's social life.</li> <li>Translation Time: Wanna help Peter speak a different language? We're open to makin' this thing multilingual, so foreign folks can also enjoy Peter's unique perspective on Linux.</li> </ul> <p>Before You Dive In:</p> <ul> <li>Read the Docs: We got a whole bunch of documentation to help you get started. Read it like you're studyin' for a test, and you'll be less lost than Meg at a family dinner.</li> <li> <p>Get the API Key: You need a fancy-pants API key from here. You'll need to set that up as an environment variable before this tool will really work. Don't come cryin' to me if you skip this part.</p> <p>Important</p> <p>Make sure to save it to your Environment by running the following. You're gonna need it to run the tests.: <pre><code>$ export GOOGLE_API_KEY=&lt;YOUR_API_KEY&gt;\n</code></pre></p> </li> <li> <p>Git Gud: You better know how to use Git before you start messin' with the code. Unless you wanna end up like Cleveland after a night at the Drunken Clam, learn the basics.</p> </li> <li>Python Power: This whole thing is built on Python. So if you don't know Python from a peanut, you might wanna brush up on your skills first.</li> <li>Read the Code: Don't come in here like a bull in a china shop. Take some time to understand how the code works before you start makin' changes.</li> <li>Test Your Stuff: Nobody wants a buggy mess. Make sure your changes actually work before you submit them.</li> </ul> <p>How to Contribute:</p> <ol> <li>Fork It!: Head over to GitHub and fork this repository. Think of it like makin' your own copy of Peter's Family Guy script, but with less chicken fights.</li> <li>Branch Out: Create a new branch for your changes. This keeps things organized and prevents you from steppin' on other people's work (like Meg steppin' on Peter's patience).</li> <li>Code Away!: Make your changes, write clear comments (even a monkey like Brian could understand!), and test everything thoroughly.</li> <li> <p>Test the Hell out of it!: Make sure your changes actually work before you submit them. We don't want a buggy mess.</p> <p>Tip</p> <p>Theres tests in the <code>tests</code> directory. Run them to make sure your changes don't break anything. <pre><code>$ pytest\n</code></pre> You wanna see something like this: <pre><code>=========== test session starts ==========\nplatform linux -- Python 3.10.12, pytest-8.2.0, pluggy-1.5.0\nrootdir: /mnt/Data/Cloud/Python/peter-explains\nplugins: cov-5.0.0, console-scripts-1.4.1\ncollected 7 items                \n\ntests/peter_explains/test_peter.py .......  [100%]\n\n=========== 7 passed in 17.51s ===========\n</code></pre></p> </li> <li> <p>Push It Good: Push your changes to your forked repository. This is like showin' off your work to the class.</p> <p>Tip</p> <p>You might wanna check yo linting before you push. Run the following to check for any linting errors: <pre><code>$ python -m pylint python -m pylint $(git ls-files '*.py') --rcfile .pylintrc\n</code></pre> It better be a 10.0/10.0 like Peter's IQ. <pre><code>Your code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)\n</code></pre></p> </li> <li> <p>Pull Request Time: Open a pull request to this repository. This is basically sayin', \"Hey, check out my awesome changes!\"</p> </li> <li>Review and Repeat: We'll review your pull request and give you feedback. Be prepared for some back-and-forth, just like Peter and Lois bickerin' about the bills. But don't worry, we ain't gonna be as harsh as Stewie.</li> </ol> <p>Important Stuff (Don't Skip This Part):</p> <ul> <li>Be Respectful: Even though this is Peter Explains Linux, we still expect everyone to be respectful of each other. No name-callin', like Peter callin' Quagmire a pervert (even though it's true).</li> <li>Follow the Code Style: We have a certain way we like our code to look. Follow the style guide so your code doesn't stick out like a sore thumb (like Peter in a speedo).</li> <li>Licensing: All contributions to this project are licensed under the MIT License. Basically, you're giving us permission to use your code, and we're doin' the same for you (with proper credit, of course).</li> </ul> <p>So, You Think You Can Hack It?</p> <p>If you think you can handle the pressure (and the occasional Peter-ism), then we welcome your contributions! Just remember, with great power comes great responsibility (and the possibility of gettin' a wedgie from Lois).</p> <p>Good luck, and don't screw it up!</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installing-peter-explains-for-dummies","title":"Installing Peter Explains (For Dummies)","text":"<p>Alright folks, if you wanna get this hot mess of a tool onto your computer, pay attention. It shouldn't be harder than setting up a VCR (but then again, who even uses those anymore?).</p> <p></p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Brain (Sort Of): You don't need to be a genius to install this thing, but a basic understanding of computers is helpful. If you think a terminal is a bus station, you might wanna brush up on your skills first.</li> <li>Python (The Real Kind): This tool ain't written in the language of snakes, it's made with Python. Make sure you have Python installed on your system. Don't know how to check? Google it, even Meg can figure that out.</li> <li>PIP (The Package Thingy): PIP is what helps you install all sorts of fancy Python packages, and you'll need it to get this project workin'. Don't worry, it usually comes bundled with Python.</li> </ul>"},{"location":"installation/#installation-steps","title":"Installation Steps","text":""},{"location":"installation/#option-1-using-pip-for-those-who-like-things-simple","title":"Option 1: Using pip (For Those Who Like Things Simple)","text":"<ol> <li>Open Your Terminal: This is the scary black box where you type stuff. If you ain't never used one before, good luck, you're gonna need it.</li> <li> <p>Run This Magical Command: Type the following, then hit Enter:</p> <p><pre><code>$ pip install peter-explains\n</code></pre> This tells PIP to fetch the 'peter-explains' package and install it for ya. Ain't technology amazing? 3. Set the API Key: Get one o those for free from here. The run: <pre><code>$ peter --api &lt;YOUR_API_KEY&gt;\n</code></pre></p> </li> </ol> <p>Warning</p> <p>Tip</p> <p>If yo dumbass scews up setting the API key, run the following to delete it and try setting it up again. <pre><code>$ peter --delete-api\n$ peter --api &lt;YOUR_CORRECT_API_KEY&gt;\n</code></pre></p>"},{"location":"installation/#retep-is-gonna-ruin-your-day-if-you-try-to-use-it-without-the-api-key","title":"Retep is gonna ruin your day if you try to use it without the API KEY","text":"<pre><code>Don't worry. Meg's here to help. You need a FREE Google Gemini API KEY.\n\n- Get yours from here: [https://aistudio.google.com/app/](https://aistudio.google.com/app/)\n- Save the `API KEY` to your Environment by running the following:\n\n  $ peter --api &lt;YOUR_API_KEY&gt;\n</code></pre>"},{"location":"installation/#option-2-from-source-for-masochists","title":"Option 2: From Source (For Masochists)","text":"<ol> <li>Fork and Clone (GitHub Stuff): If you're a glutton for punishment, head to GitHub, fork the repository for this project, and clone it. You'll need Git for this.</li> <li> <p>Installin' Time: Navigate to your cloned directory in your terminal, then run this:</p> <pre><code>$ pip install .\n</code></pre> </li> </ol>"},{"location":"installation/#test-it-out-see-if-it-actually-works","title":"Test It Out (See If It Actually Works)","text":"<p>Now for the moment of truth. Type the following into your terminal:</p> <pre><code> $ peter --help\n</code></pre> <p>If you see a bunch of help text (and likely some insults from me), then congrats, you've installed it! If you get errors, well... maybe this thing ain't for you after all.</p>"},{"location":"installation/#important-note-for-api-keys","title":"Important Note for API Keys","text":"<p>Don't forget, you'll need a fancy-pants API key from wherever you're gettin' your LLM stuff. You'll need to set that up as an environment variable: https://aistudio.google.com/app/ before this tool will really work. Don't come cryin' to me if you skip this part.</p>"},{"location":"installation/#troubleshooting-when-things-go-wrong-as-they-probably-will","title":"Troubleshooting (When Things Go Wrong, As They Probably Will)","text":"<ul> <li>\"I Don't Get It...\" Don't worry, most of us don't. Read the README file (if it even exists). You might stumble upon the answer.</li> <li>\"It's Still Broken!\" Did you try turning it off and on again? Okay, in all seriousness, try searching the GitHub issues on the project's page. Someone else probably messed up the same way you did.</li> <li> <p>\"I Found a Bug!\" Ugh, like a freakin' cockroach in the kitchen. Well, report it on GitHub, and maybe someone smarter than you can fix it (that shouldn't be hard to find).</p> <p>That's it! If you made it this far, you're either a tech whiz or a glutton for punishment (or both). Now go learn some Linux commands the Peter Griffin way.</p> </li> </ul> <p>Let me know if you want specific links for the GitHub repo or API key instructions woven into this guide!</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#api-key","title":"API Key","text":""},{"location":"reference/#peter_explains.api_key.GoogleApiKey","title":"<code>GoogleApiKey</code>","text":"<p>This class provides methods to get and set the Google AI platform API key.</p> Source code in <code>peter_explains/api_key.py</code> <pre><code>class GoogleApiKey:\n    \"\"\"\n    This class provides methods to get and set the Google AI platform API key.\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        self.api_key_path = GoogleApiKey.get_api_ley_file_path()\n\n    @staticmethod\n    def get_api_ley_file_path() -&gt; str:\n        if os.name == \"nt\":\n            api_file_path = os.path.join(\n                os.getenv(\"LOCALAPPDATA\"), __app_name__, f\"{__app_name__}_api.json\"\n            )\n        elif os.name == \"posix\":\n            home = os.path.expanduser(\"~\")\n            if sys.platform == \"darwin\":\n                api_file_path = os.path.join(\n                    home,\n                    \"Library\",\n                    \"Application Support\",\n                    __app_name__,\n                    f\"{__app_name__}_api.json\",\n                )\n            else:\n                api_file_path = os.path.join(\n                    home, \".config\", __app_name__, f\"{__app_name__}_api.json\"\n                )\n\n        return api_file_path\n\n    def get(self) -&gt; str:\n        \"\"\"\n        Retrieves the API key from the specified file.\n\n        Returns:\n            str: The API key.\n\n        Raises:\n            FileNotFoundError: If the API key file does not exist.\n        \"\"\"\n        if not os.path.exists(self.api_key_path):\n            show_no_api_key_error()\n            sys.exit(1)\n\n        with open(self.api_key_path, \"r\", encoding=\"utf-8\") as file:\n            data = json.load(file)\n            return data[\"api_key\"]\n\n    def set(self, api_key: str):\n        \"\"\"\n        Sets the API key for the application.\n\n        Args:\n            api_key (str): The API key to be set.\n\n        Raises:\n            ValueError: If the length of the API key is less than 30 or greater than 50.\n\n        Returns:\n            None\n        \"\"\"\n        if len(api_key) &lt; 30 or len(api_key) &gt; 50:\n            show_crappy_api_key_error()\n            sys.exit(1)\n\n        with open(self.api_key_path, \"w\", encoding=\"utf-8\") as file:\n            json.dump({\"api_key\": api_key}, file)\n        show_api_key_success_message()\n        sys.exit(0)\n\n    def clear(self):\n        \"\"\"\n        This function clears the API key from the keyring.\n\n        Args:\n            None\n\n        Returns:\n            None\n        \"\"\"\n        os.remove(self.api_key_path)\n        print(\"Retep just deleted your API key. Loser!\")\n</code></pre>"},{"location":"reference/#peter_explains.api_key.GoogleApiKey.clear","title":"<code>clear()</code>","text":"<p>This function clears the API key from the keyring.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>peter_explains/api_key.py</code> <pre><code>def clear(self):\n    \"\"\"\n    This function clears the API key from the keyring.\n\n    Args:\n        None\n\n    Returns:\n        None\n    \"\"\"\n    os.remove(self.api_key_path)\n    print(\"Retep just deleted your API key. Loser!\")\n</code></pre>"},{"location":"reference/#peter_explains.api_key.GoogleApiKey.get","title":"<code>get()</code>","text":"<p>Retrieves the API key from the specified file.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The API key.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the API key file does not exist.</p> Source code in <code>peter_explains/api_key.py</code> <pre><code>def get(self) -&gt; str:\n    \"\"\"\n    Retrieves the API key from the specified file.\n\n    Returns:\n        str: The API key.\n\n    Raises:\n        FileNotFoundError: If the API key file does not exist.\n    \"\"\"\n    if not os.path.exists(self.api_key_path):\n        show_no_api_key_error()\n        sys.exit(1)\n\n    with open(self.api_key_path, \"r\", encoding=\"utf-8\") as file:\n        data = json.load(file)\n        return data[\"api_key\"]\n</code></pre>"},{"location":"reference/#peter_explains.api_key.GoogleApiKey.set","title":"<code>set(api_key)</code>","text":"<p>Sets the API key for the application.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The API key to be set.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the length of the API key is less than 30 or greater than 50.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>peter_explains/api_key.py</code> <pre><code>def set(self, api_key: str):\n    \"\"\"\n    Sets the API key for the application.\n\n    Args:\n        api_key (str): The API key to be set.\n\n    Raises:\n        ValueError: If the length of the API key is less than 30 or greater than 50.\n\n    Returns:\n        None\n    \"\"\"\n    if len(api_key) &lt; 30 or len(api_key) &gt; 50:\n        show_crappy_api_key_error()\n        sys.exit(1)\n\n    with open(self.api_key_path, \"w\", encoding=\"utf-8\") as file:\n        json.dump({\"api_key\": api_key}, file)\n    show_api_key_success_message()\n    sys.exit(0)\n</code></pre>"},{"location":"reference/#args","title":"Args","text":""},{"location":"reference/#peter_explains.args.parse_arguments","title":"<code>parse_arguments()</code>","text":"<p>Parse command line arguments and return the command to be explained.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The command to be explained.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the help option is specified.</p> <code>SystemExit</code> <p>If the required argument is missing.</p> Source code in <code>peter_explains/args.py</code> <pre><code>def parse_arguments():\n    \"\"\"\n    Parse command line arguments and return the command to be explained.\n\n    Returns:\n        str: The command to be explained.\n\n    Raises:\n        SystemExit: If the help option is specified.\n        SystemExit: If the required argument is missing.\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Linux commands explained the Peter Griffin way. Seriously.\",\n        add_help=False,\n    )\n    parser.add_argument(\n        \"--version\", action=\"version\", version=f\"Peter Explains (peter) v{__version__}\"\n    )\n    parser.add_argument(\n        \"-h\",\n        \"--help\",\n        action=\"store_true\",\n        help=\"Display the help message\",\n    )\n\n    parser.add_argument(\n        \"--api\",\n        metavar=\"&lt;API_KEY&gt;\",\n        help=\"Set the Google AI platform API key\",\n    )\n\n    parser.add_argument(\n        \"--delete-api\",\n        action=\"store_true\",\n        help=\"Deletes the Google AI platform API key\",\n    )\n\n    # add --clear-cache argument to clear cache\n    parser.add_argument(\n        \"--delete-cache\",\n        action=\"store_true\",\n        help=\"Delete the cache\",\n    )\n\n    parser.add_argument(\"command\", nargs=\"?\", help=\"The command to be explained\")\n\n    args = parser.parse_args()\n\n    # Handle API key operations\n    google_api_key = GoogleApiKey()\n\n    if args.api:\n        google_api_key.set(args.api)\n        sys.exit(0)\n\n    if args.delete_api:\n        google_api_key.clear()\n        sys.exit(0)\n\n    # Handle cache operations\n    cache = PeterCache()\n\n    if args.delete_cache:\n        cache.clear()\n        sys.exit(0)\n\n    if args.help:\n        show_peter_help()\n        sys.exit(0)\n\n    # Handle missing required argument\n    if not args.command:\n        show_peter_help()\n        sys.exit(1)\n\n    else:\n        command = args.command.strip().lower()\n        return command\n</code></pre>"},{"location":"reference/#cache","title":"Cache","text":""},{"location":"reference/#peter_explains.cache.PeterCache","title":"<code>PeterCache</code>","text":"<p>This class provides methods to interact with the cache for the Peter Explains CLI.</p> Source code in <code>peter_explains/cache.py</code> <pre><code>class PeterCache:\n    \"\"\"\n    This class provides methods to interact with the cache for the Peter Explains CLI.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes the PeterCache class.\n        \"\"\"\n        self.cache = Cache(self.get_cache_dir(__app_name__))\n\n    @staticmethod\n    def get_cache_dir(cache_dir_name: str) -&gt; str:\n        \"\"\"\n        This function gets the cache directory for the Peter Explains CLI based on the operating system.\n\n        Args:\n            cache_dir_name (str): The name of the Peter Explains CLI cache directory.\n\n        Returns:\n            cache_dir (str): The cache directory for the Peter Explains CLI.\n        \"\"\"\n        if os.name == \"nt\":\n            cache_dir = os.path.join(os.getenv(\"LOCALAPPDATA\"), cache_dir_name, \"cache\")\n        elif os.name == \"posix\":\n            home = os.path.expanduser(\"~\")\n            if sys.platform == \"darwin\":\n                cache_dir = os.path.join(\n                    home, \"Library\", \"Application Support\", cache_dir_name, \"cache\"\n                )\n            else:\n                cache_dir = os.path.join(home, \".config\", cache_dir_name, \"cache\")\n\n        return cache_dir\n\n    def __contains__(self, key):\n        \"\"\"\n        Check if the cache contains a specific key.\n\n        Args:\n            key: The key to check.\n\n        Returns:\n            True if the cache contains the key, False otherwise.\n        \"\"\"\n        return key in self.cache\n\n    def save(self, key: str, value: CommandExplanation | CommandExplanationWithArguments):\n        \"\"\"\n        Saves the given value in the cache with the specified key.\n\n        Args:\n            key (str): The key to associate with the value in the cache.\n            value (CommandExplanation | CommandExplanationWithArguments): The value to be saved in the cache.\n\n        Returns:\n            None\n        \"\"\"\n        self.cache[key] = value\n\n    def get(self, key) -&gt; CommandExplanation | CommandExplanationWithArguments | None:\n        \"\"\"\n        Retrieve the value associated with the given key from the cache.\n\n        Parameters:\n            key (any): The key to retrieve the value for.\n\n        Returns:\n            The value associated with the key, or None if the key is not found.\n        \"\"\"\n        return self.cache.get(key)\n\n    def delete(self, key):\n        \"\"\"\n        Deletes the specified key from the cache.\n\n        Args:\n            key: The key to be deleted from the cache.\n\n        Returns:\n            None\n        \"\"\"\n        del self.cache[key]\n\n    def clear(self):\n        \"\"\"\n        Clears the cache by removing all stored items.\n        \"\"\"\n        self.cache.clear()\n        print(\"A fresh new start! How 'bout that?\")\n</code></pre>"},{"location":"reference/#peter_explains.cache.PeterCache.__contains__","title":"<code>__contains__(key)</code>","text":"<p>Check if the cache contains a specific key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>The key to check.</p> required <p>Returns:</p> Type Description <p>True if the cache contains the key, False otherwise.</p> Source code in <code>peter_explains/cache.py</code> <pre><code>def __contains__(self, key):\n    \"\"\"\n    Check if the cache contains a specific key.\n\n    Args:\n        key: The key to check.\n\n    Returns:\n        True if the cache contains the key, False otherwise.\n    \"\"\"\n    return key in self.cache\n</code></pre>"},{"location":"reference/#peter_explains.cache.PeterCache.__init__","title":"<code>__init__()</code>","text":"<p>Initializes the PeterCache class.</p> Source code in <code>peter_explains/cache.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Initializes the PeterCache class.\n    \"\"\"\n    self.cache = Cache(self.get_cache_dir(__app_name__))\n</code></pre>"},{"location":"reference/#peter_explains.cache.PeterCache.clear","title":"<code>clear()</code>","text":"<p>Clears the cache by removing all stored items.</p> Source code in <code>peter_explains/cache.py</code> <pre><code>def clear(self):\n    \"\"\"\n    Clears the cache by removing all stored items.\n    \"\"\"\n    self.cache.clear()\n    print(\"A fresh new start! How 'bout that?\")\n</code></pre>"},{"location":"reference/#peter_explains.cache.PeterCache.delete","title":"<code>delete(key)</code>","text":"<p>Deletes the specified key from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>The key to be deleted from the cache.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>peter_explains/cache.py</code> <pre><code>def delete(self, key):\n    \"\"\"\n    Deletes the specified key from the cache.\n\n    Args:\n        key: The key to be deleted from the cache.\n\n    Returns:\n        None\n    \"\"\"\n    del self.cache[key]\n</code></pre>"},{"location":"reference/#peter_explains.cache.PeterCache.get","title":"<code>get(key)</code>","text":"<p>Retrieve the value associated with the given key from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>any</code> <p>The key to retrieve the value for.</p> required <p>Returns:</p> Type Description <code>CommandExplanation | CommandExplanationWithArguments | None</code> <p>The value associated with the key, or None if the key is not found.</p> Source code in <code>peter_explains/cache.py</code> <pre><code>def get(self, key) -&gt; CommandExplanation | CommandExplanationWithArguments | None:\n    \"\"\"\n    Retrieve the value associated with the given key from the cache.\n\n    Parameters:\n        key (any): The key to retrieve the value for.\n\n    Returns:\n        The value associated with the key, or None if the key is not found.\n    \"\"\"\n    return self.cache.get(key)\n</code></pre>"},{"location":"reference/#peter_explains.cache.PeterCache.get_cache_dir","title":"<code>get_cache_dir(cache_dir_name)</code>  <code>staticmethod</code>","text":"<p>This function gets the cache directory for the Peter Explains CLI based on the operating system.</p> <p>Parameters:</p> Name Type Description Default <code>cache_dir_name</code> <code>str</code> <p>The name of the Peter Explains CLI cache directory.</p> required <p>Returns:</p> Name Type Description <code>cache_dir</code> <code>str</code> <p>The cache directory for the Peter Explains CLI.</p> Source code in <code>peter_explains/cache.py</code> <pre><code>@staticmethod\ndef get_cache_dir(cache_dir_name: str) -&gt; str:\n    \"\"\"\n    This function gets the cache directory for the Peter Explains CLI based on the operating system.\n\n    Args:\n        cache_dir_name (str): The name of the Peter Explains CLI cache directory.\n\n    Returns:\n        cache_dir (str): The cache directory for the Peter Explains CLI.\n    \"\"\"\n    if os.name == \"nt\":\n        cache_dir = os.path.join(os.getenv(\"LOCALAPPDATA\"), cache_dir_name, \"cache\")\n    elif os.name == \"posix\":\n        home = os.path.expanduser(\"~\")\n        if sys.platform == \"darwin\":\n            cache_dir = os.path.join(\n                home, \"Library\", \"Application Support\", cache_dir_name, \"cache\"\n            )\n        else:\n            cache_dir = os.path.join(home, \".config\", cache_dir_name, \"cache\")\n\n    return cache_dir\n</code></pre>"},{"location":"reference/#peter_explains.cache.PeterCache.save","title":"<code>save(key, value)</code>","text":"<p>Saves the given value in the cache with the specified key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to associate with the value in the cache.</p> required <code>value</code> <code>CommandExplanation | CommandExplanationWithArguments</code> <p>The value to be saved in the cache.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>peter_explains/cache.py</code> <pre><code>def save(self, key: str, value: CommandExplanation | CommandExplanationWithArguments):\n    \"\"\"\n    Saves the given value in the cache with the specified key.\n\n    Args:\n        key (str): The key to associate with the value in the cache.\n        value (CommandExplanation | CommandExplanationWithArguments): The value to be saved in the cache.\n\n    Returns:\n        None\n    \"\"\"\n    self.cache[key] = value\n</code></pre>"},{"location":"reference/#format","title":"Format","text":""},{"location":"reference/#peter_explains.format.pretty_print_result","title":"<code>pretty_print_result(result)</code>","text":"<p>Prints the command explanation or command explanation with arguments in a formatted manner.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CommandExplanation | CommandExplanationWithArguments</code> <p>The result to be printed.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>peter_explains/format.py</code> <pre><code>def pretty_print_result(result: CommandExplanation | CommandExplanationWithArguments):\n    \"\"\"\n    Prints the command explanation or command explanation with arguments in a formatted manner.\n\n    Args:\n        result (CommandExplanation | CommandExplanationWithArguments): The result to be printed.\n\n    Returns:\n        None\n    \"\"\"\n    print(\n        Fore.CYAN\n        + \"\\nCommand: \"\n        + Style.RESET_ALL\n        + Style.BRIGHT\n        + result.command\n        + Style.RESET_ALL\n    )\n    print(Fore.YELLOW + \"\\nPurpose:\\n\" + Style.RESET_ALL + result.purpose)\n\n    if isinstance(result, CommandExplanation):\n        print(Fore.YELLOW + \"\\nSyntax:\" + Style.RESET_ALL)\n        print(Fore.LIGHTBLACK_EX + result.syntax + Style.RESET_ALL + \"\\n\")\n\n        print(Fore.YELLOW + \"Options:\" + Style.RESET_ALL)\n        for option in result.options:\n            print(Fore.BLUE + f\"* {option}\" + Style.RESET_ALL)\n\n        print(Fore.YELLOW + \"\\nExamples:\" + Style.RESET_ALL)\n        for example in result.examples:\n            print(Fore.GREEN + \"* \" + example + Style.RESET_ALL)\n\n    elif isinstance(result, CommandExplanationWithArguments):\n        print(Fore.YELLOW + \"\\nBreakdown:\" + Style.RESET_ALL)\n        for explanation in result.breakdown:\n            print(Fore.GREEN + f\"* {explanation}\" + Style.RESET_ALL)\n</code></pre>"},{"location":"reference/#main","title":"Main","text":""},{"location":"reference/#peter_explains.main.main","title":"<code>main()</code>  <code>async</code>","text":"<p>Main function to run the Peter Explains CLI.</p> <p>This function is an async function that runs the main Peter Explains CLI. It uses the asyncio library to run the main Peter Explains CLI.</p> Source code in <code>peter_explains/main.py</code> <pre><code>async def main():\n    \"\"\"\n    Main function to run the Peter Explains CLI.\n\n    This function is an async function that runs the main Peter Explains CLI.\n    It uses the asyncio library to run the main Peter Explains CLI.\n    \"\"\"\n\n    try:\n        command = parse_arguments()\n        peter_ai = PeterAi(model_name=\"gemini-pro\")\n        cache = PeterCache()\n\n        result = None\n\n        if command in cache:  # Check in cache\n            result = cache.get(command)\n\n        else:\n            tasks = [\n                asyncio.create_task(show_loading_message()),\n                asyncio.create_task(peter_ai.explain_command(command)),\n            ]\n            done, pending = await asyncio.wait(\n                tasks, return_when=asyncio.FIRST_COMPLETED\n            )\n\n            pending.pop().cancel()  # Cancel the loading message task\n            result = done.pop().result()  # Get the result of the explain_command task\n\n            cache.save(command, result)  # Save in cache\n\n        pretty_print_result(result)\n\n    except Exception as e:\n        show_error_message(e)\n</code></pre>"},{"location":"reference/#peter_explains.main.peter","title":"<code>peter()</code>","text":"<p>Function to run the Peter Explains CLI.</p> <p>This function is the entry point for the Peter Explains CLI. It runs the main function using the asyncio library.</p> Source code in <code>peter_explains/main.py</code> <pre><code>def peter():\n    \"\"\"\n    Function to run the Peter Explains CLI.\n\n    This function is the entry point for the Peter Explains CLI.\n    It runs the main function using the asyncio library.\n    \"\"\"\n    asyncio.run(main())\n</code></pre>"},{"location":"reference/#messages","title":"Messages","text":""},{"location":"reference/#peter_explains.messages.ErrorMessage","title":"<code>ErrorMessage</code>","text":"<p>Class to store error messages for the Peter Explains CLI.</p> Source code in <code>peter_explains/messages.py</code> <pre><code>class ErrorMessage:\n    \"\"\"\n    Class to store error messages for the Peter Explains CLI.\n    \"\"\"\n\n    MESSAGES = [\n        \"Aw crap, somethin' broke. Typical. Maybe Meg stepped on the keyboard again.\",\n        \"Hey, if this thing gives ya the wrong answer, don't blame me. I'm just the idiot typin' stuff in.\",\n        \"Alright, this might take longer than I thought. You got any beer in the fridge?\",\n        \"Ugh, somethin' ain't right. Maybe I shoulda paid more attention to that computer class in high school.\",\n        \"Aw jeez, I think I broke it. Don't tell Lois, she'll make me fix it.\",\n        \"I swear, this thing's got more bugs than the Griffin house. And that's sayin' somethin'.\",\n    ]\n\n    @staticmethod\n    def get_random_message() -&gt; str:\n        \"\"\"\n        Returns a random error message from the list of error messages.\n\n        Returns:\n            str: A random error message.\n        \"\"\"\n        return random.choice(ErrorMessage.MESSAGES)\n</code></pre>"},{"location":"reference/#peter_explains.messages.ErrorMessage.get_random_message","title":"<code>get_random_message()</code>  <code>staticmethod</code>","text":"<p>Returns a random error message from the list of error messages.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A random error message.</p> Source code in <code>peter_explains/messages.py</code> <pre><code>@staticmethod\ndef get_random_message() -&gt; str:\n    \"\"\"\n    Returns a random error message from the list of error messages.\n\n    Returns:\n        str: A random error message.\n    \"\"\"\n    return random.choice(ErrorMessage.MESSAGES)\n</code></pre>"},{"location":"reference/#peter_explains.messages.LoadingMessage","title":"<code>LoadingMessage</code>","text":"<p>Class to store loading messages for the Peter Explains CLI.</p> Source code in <code>peter_explains/messages.py</code> <pre><code>class LoadingMessage:\n    \"\"\"\n    Class to store loading messages for the Peter Explains CLI.\n    \"\"\"\n\n    MESSAGES = [\n        \"Hang on, Lois, I'm tryin' to think here. This is harder than figuring out what's goin' on in Stewie's head.\",\n        \"Jeez, this computer's slower than Quagmire after a night at The Clam.\",\n        \"Ugh, I swear this thing gets dumber every day. It's like talkin' to Brian...\",\n        \"Hold your horses! I'm workin' on it... kinda.\",\n        \"Aw jeez, is this thing even plugged in? Meg wouldn't know the difference.\",\n        \"C'mon, you pile of junk! I bet even Chris could figure this out faster...\",\n        \"Alright, alright, I'm thinkin'... Thinkin' about how much better a cold beer would be right now.\",\n        \"This is takin' longer than waitin' in line at the DMV. And that place smells better.\",\n        \"Hey, if I don't figure this out soon, the freakin' TV guide's gonna be outdated.\",\n    ]\n\n    @staticmethod\n    def get_random_message() -&gt; str:\n        \"\"\"\n        Returns a random message from the available messages.\n\n        Returns:\n            str: A random message.\n        \"\"\"\n        return random.choice(LoadingMessage.MESSAGES)\n</code></pre>"},{"location":"reference/#peter_explains.messages.LoadingMessage.get_random_message","title":"<code>get_random_message()</code>  <code>staticmethod</code>","text":"<p>Returns a random message from the available messages.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A random message.</p> Source code in <code>peter_explains/messages.py</code> <pre><code>@staticmethod\ndef get_random_message() -&gt; str:\n    \"\"\"\n    Returns a random message from the available messages.\n\n    Returns:\n        str: A random message.\n    \"\"\"\n    return random.choice(LoadingMessage.MESSAGES)\n</code></pre>"},{"location":"reference/#name","title":"Name","text":""},{"location":"reference/#peter-ai","title":"Peter AI","text":""},{"location":"reference/#peter_explains.peter_ai.PeterAi","title":"<code>PeterAi</code>","text":"<p>This class provides methods to explain Linux commands using the Google Generative AI model.</p> Source code in <code>peter_explains/peter_ai.py</code> <pre><code>class PeterAi:\n    \"\"\"\n    This class provides methods to explain Linux commands using the Google Generative AI model.\n    \"\"\"\n\n    def __init__(self, model_name: str = \"gemini-pro\"):\n        \"\"\"\n        Initialize the PeterAi class with the specified model.\n\n        Args:\n        - model_name (str): The name of the model to use for explaining Linux commands.\n\n        Returns:\n        - None\n        \"\"\"\n        api_key = GoogleApiKey().get()\n        self.safety_settings = [\n            {\n                \"category\": \"HARM_CATEGORY_DANGEROUS\",\n                \"threshold\": \"BLOCK_NONE\",\n            },\n            {\n                \"category\": \"HARM_CATEGORY_HARASSMENT\",\n                \"threshold\": \"BLOCK_NONE\",\n            },\n            {\n                \"category\": \"HARM_CATEGORY_HATE_SPEECH\",\n                \"threshold\": \"BLOCK_NONE\",\n            },\n            {\n                \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n                \"threshold\": \"BLOCK_NONE\",\n            },\n            {\n                \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n                \"threshold\": \"BLOCK_NONE\",\n            },\n            {\n                \"category\": \"HARM_CATEGORY_SEXUAL\",\n                \"threshold\": \"BLOCK_NONE\",\n            },\n            # TODO: Uncomment the following lines to enable additional safety settings\n            # {\n            #     \"category\": \"HARM_CATEGORY_DEROGATORY\",\n            #     \"threshold\": \"BLOCK_NONE\",\n            # },\n            # {\n            #     \"category\": \"HARM_CATEGORY_MEDICAL\",\n            #     \"threshold\": \"BLOCK_NONE\",\n            # },\n            # {\n            #     \"category\": \"HARM_CATEGORY_VIOLENCE\",\n            #     \"threshold\": \"BLOCK_NONE\",\n            # },\n            # {\n            #     \"category\": \"HARM_CATEGORY_TOXICITY\",\n            #     \"threshold\": \"BLOCK_NONE\",\n            # },\n        ]\n        genai.configure(transport=\"grpc_asyncio\", api_key=api_key)\n        self.model = genai.GenerativeModel(\n            model_name, safety_settings=self.safety_settings\n        )\n\n    async def explain_command(\n        self, command: str\n    ) -&gt; CommandExplanation | CommandExplanationWithArguments:\n        \"\"\"\n        Explain a Linux command in a JSON format suitable for use in a command-line tool.\n\n        This function uses the Google Generative AI model to explain a Linux command in a JSON format suitable for use in a command-line tool. It takes a Linux command as input and returns a JSON object with the following keys:\n        &gt; command_name: The name of the Linux command\n        &gt; purpose: A short, funny explanation of its purpose in Peter Griffin's voice.\n        &gt; syntax: Basic command structure with optional placeholders for arguments (e.g., \"command_name [options] &lt;file_or_directory&gt;\")\n        &gt; options: A few common options. Provide brief, humorous explanations for each.\n        &gt; examples: 2-3 examples demonstrating the command's usage. Keep it simple and funny!\n\n        Args:\n            command (str): The Linux command to explain.\n\n        Returns:\n            CommandExplanation | CommandExplanationWithArguments: The explanation of the Linux command.\n        \"\"\"\n\n        result = None\n        if \" \" in command:  # Check if command includes arguments\n            prompt = PromptType.WITH_ARGUMENTS.format(command=command)\n            response = await self.model.generate_content_async(\n                prompt, safety_settings=self.safety_settings\n            )\n            result = CommandExplanationWithArguments.from_response(response.text)\n        else:\n            prompt = PromptType.WITHOUT_ARGUMENTS.format(command=command)\n            response = await self.model.generate_content_async(\n                prompt, safety_settings=self.safety_settings\n            )\n            result = CommandExplanation.from_response(response.text)\n        return result\n</code></pre>"},{"location":"reference/#peter_explains.peter_ai.PeterAi.__init__","title":"<code>__init__(model_name='gemini-pro')</code>","text":"<p>Initialize the PeterAi class with the specified model.</p> <p>Args: - model_name (str): The name of the model to use for explaining Linux commands.</p> <p>Returns: - None</p> Source code in <code>peter_explains/peter_ai.py</code> <pre><code>def __init__(self, model_name: str = \"gemini-pro\"):\n    \"\"\"\n    Initialize the PeterAi class with the specified model.\n\n    Args:\n    - model_name (str): The name of the model to use for explaining Linux commands.\n\n    Returns:\n    - None\n    \"\"\"\n    api_key = GoogleApiKey().get()\n    self.safety_settings = [\n        {\n            \"category\": \"HARM_CATEGORY_DANGEROUS\",\n            \"threshold\": \"BLOCK_NONE\",\n        },\n        {\n            \"category\": \"HARM_CATEGORY_HARASSMENT\",\n            \"threshold\": \"BLOCK_NONE\",\n        },\n        {\n            \"category\": \"HARM_CATEGORY_HATE_SPEECH\",\n            \"threshold\": \"BLOCK_NONE\",\n        },\n        {\n            \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n            \"threshold\": \"BLOCK_NONE\",\n        },\n        {\n            \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n            \"threshold\": \"BLOCK_NONE\",\n        },\n        {\n            \"category\": \"HARM_CATEGORY_SEXUAL\",\n            \"threshold\": \"BLOCK_NONE\",\n        },\n        # TODO: Uncomment the following lines to enable additional safety settings\n        # {\n        #     \"category\": \"HARM_CATEGORY_DEROGATORY\",\n        #     \"threshold\": \"BLOCK_NONE\",\n        # },\n        # {\n        #     \"category\": \"HARM_CATEGORY_MEDICAL\",\n        #     \"threshold\": \"BLOCK_NONE\",\n        # },\n        # {\n        #     \"category\": \"HARM_CATEGORY_VIOLENCE\",\n        #     \"threshold\": \"BLOCK_NONE\",\n        # },\n        # {\n        #     \"category\": \"HARM_CATEGORY_TOXICITY\",\n        #     \"threshold\": \"BLOCK_NONE\",\n        # },\n    ]\n    genai.configure(transport=\"grpc_asyncio\", api_key=api_key)\n    self.model = genai.GenerativeModel(\n        model_name, safety_settings=self.safety_settings\n    )\n</code></pre>"},{"location":"reference/#peter_explains.peter_ai.PeterAi.explain_command","title":"<code>explain_command(command)</code>  <code>async</code>","text":"<p>Explain a Linux command in a JSON format suitable for use in a command-line tool.</p> <p>This function uses the Google Generative AI model to explain a Linux command in a JSON format suitable for use in a command-line tool. It takes a Linux command as input and returns a JSON object with the following keys:</p> <p>command_name: The name of the Linux command purpose: A short, funny explanation of its purpose in Peter Griffin's voice. syntax: Basic command structure with optional placeholders for arguments (e.g., \"command_name [options] \") options: A few common options. Provide brief, humorous explanations for each. examples: 2-3 examples demonstrating the command's usage. Keep it simple and funny! <p>Parameters:</p> Name Type Description Default <code>command</code> <code>str</code> <p>The Linux command to explain.</p> required <p>Returns:</p> Type Description <code>CommandExplanation | CommandExplanationWithArguments</code> <p>CommandExplanation | CommandExplanationWithArguments: The explanation of the Linux command.</p> Source code in <code>peter_explains/peter_ai.py</code> <pre><code>async def explain_command(\n    self, command: str\n) -&gt; CommandExplanation | CommandExplanationWithArguments:\n    \"\"\"\n    Explain a Linux command in a JSON format suitable for use in a command-line tool.\n\n    This function uses the Google Generative AI model to explain a Linux command in a JSON format suitable for use in a command-line tool. It takes a Linux command as input and returns a JSON object with the following keys:\n    &gt; command_name: The name of the Linux command\n    &gt; purpose: A short, funny explanation of its purpose in Peter Griffin's voice.\n    &gt; syntax: Basic command structure with optional placeholders for arguments (e.g., \"command_name [options] &lt;file_or_directory&gt;\")\n    &gt; options: A few common options. Provide brief, humorous explanations for each.\n    &gt; examples: 2-3 examples demonstrating the command's usage. Keep it simple and funny!\n\n    Args:\n        command (str): The Linux command to explain.\n\n    Returns:\n        CommandExplanation | CommandExplanationWithArguments: The explanation of the Linux command.\n    \"\"\"\n\n    result = None\n    if \" \" in command:  # Check if command includes arguments\n        prompt = PromptType.WITH_ARGUMENTS.format(command=command)\n        response = await self.model.generate_content_async(\n            prompt, safety_settings=self.safety_settings\n        )\n        result = CommandExplanationWithArguments.from_response(response.text)\n    else:\n        prompt = PromptType.WITHOUT_ARGUMENTS.format(command=command)\n        response = await self.model.generate_content_async(\n            prompt, safety_settings=self.safety_settings\n        )\n        result = CommandExplanation.from_response(response.text)\n    return result\n</code></pre>"},{"location":"reference/#prompts","title":"Prompts","text":""},{"location":"reference/#peter_explains.prompts.PromptType","title":"<code>PromptType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Enum class representing different types of prompts for explaining Linux commands.</p> <p>Attributes:</p> Name Type Description <code>WITHOUT_ARGUMENTS</code> <p>Prompt type for explaining a Linux command without arguments.</p> <code>WITH_ARGUMENTS</code> <p>Prompt type for explaining a Linux command with arguments.</p> Source code in <code>peter_explains/prompts.py</code> <pre><code>class PromptType(Enum):\n    \"\"\"\n    Enum class representing different types of prompts for explaining Linux commands.\n\n    Attributes:\n        WITHOUT_ARGUMENTS: Prompt type for explaining a Linux command without arguments.\n        WITH_ARGUMENTS: Prompt type for explaining a Linux command with arguments.\n    \"\"\"\n\n    WITHOUT_ARGUMENTS = \"\"\"\n    **Task:** Explain the Linux command in a JSON format suitable for use in a command-line tool. Don't forget to escape characters like 'backspace' whenever necessary. Remember, this is for a humorous tool with Peter Griffin-like explanations, so be creative and casual!\n\n    **Input:** {command}\n\n    **Output:** A JSON object with the following keys:\n\n    * **command_name:** The name of the Linux command  \n    * **purpose:**  A short, funny explanation of its purpose in Peter Griffin's voice.\n    * **syntax:** Basic command structure with optional placeholders for arguments (e.g., \"command_name [options] &lt;file_or_directory&gt;\")\n    * **options:** A few common options. Provide brief, humorous explanations for each. \n    * **examples:** 2-3 examples demonstrating the command's usage. Keep it simple and funny!\n\n    **Schema of the Output:**\n    {{\n    \"command_name\": str,\n    \"purpose\": str,\n    \"options\": list[str],\n    \"examples\": list[str]\n    }}\n\n    **Example Output (for the 'ls' command):**\n\n    {{\n    \"command_name\": \"ls\",\n    \"purpose\": \"This thing's supposed to show ya what's in a folder, but half the time it lists stuff I ain't never even heard of.\",  \n    \"syntax\": \"ls [options] [path]\",\n    \"options\": [\n        \"-a: Shows ya even the sneaky files tryin' to hide.\",\n        \"-l: Details, details... gives ya more info than ya probably wanted.\" \n    ],\n    \"examples\": [\n        \"ls: Shows me what's in the current folder. Giggity!\", \n        \"ls -la: Shows me everything in the current folder, even the hidden stuff. Lois, have you seen my missing sock anywhere?\",\n        \"ls /home/peter: Shows me what's in my home folder. Lois, where's the remote? I can't find it!\"   \n    ]\n    }}\n    \"\"\"\n\n    WITH_ARGUMENTS = \"\"\"\n    **Task:** Explain the Linux command with arguments in a JSON format suitable for use in a command-line tool. Don't forget to escape characters like 'backspace' whenever necessary. Explain the purpose of the command and what each part does.  Remember, this is for a humorous tool with Peter Griffin-like explanations, so be creative and casual!\n\n    **Input:** {command}\n\n    **Output:** A JSON object with the following keys:\n\n    * **command_name:** The name of the Linux command  \n    * **purpose:**  A short, funny explanation of the overall purpose of the command with the arguments in Peter Griffin's voice.  \n    * **breakdown:** A list of explanations for each part of the command (including arguments): \n        * Each item should have a key indicating the specific part (e.g., \"tar\", \"-x\", \"v\", \"f\") and a value with its explanation.\n\n    **Schema of the Output:**\n    {{\n    \"command_name\": str,\n    \"purpose\": str,\n    \"breakdown\": list[str]\n    }}    \n\n    **Example Output (for the 'tar -xvf file.xz' command):**\n\n    {{\n    \"command_name\": \"tar\",\n    \"purpose\": \"Alright, this command's here to unpack somethin'. The '-x' means extract, '-v' is for verbose mode, like seein' everythin' that happens, and 'f' is for specifyin' the file. In this case, 'file.xz' is probably somethin' compressed with xz.\",  \n    \"breakdown\": [\n        \"tar: This is the main command, the ring leader for unpackin' things.\",\n        \"-x: This flag tells 'tar' to extract somethin', like openin' up a present.\",\n        \"-v: Verbose mode, like turnin' on the commentary for unpackin'.  More details than ya might need.\",\n        \"-f: This flag tells 'tar' which file to use, like pointin' at the right present.\",\n        \"file.xz: This is the actual file you wanna unpack, probably somethin' compressed with xz.\"\n    ]\n    }}\n    \"\"\"\n\n    def format(self, command: str) -&gt; str:\n        \"\"\"\n        Get the prompt template with the command inserted.\n\n        Args:\n            command (str): The Linux command to explain.\n\n        Returns:\n            str: The prompt template with the command inserted.\n        \"\"\"\n        return self.value.format(command=command)\n</code></pre>"},{"location":"reference/#peter_explains.prompts.PromptType.format","title":"<code>format(command)</code>","text":"<p>Get the prompt template with the command inserted.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>str</code> <p>The Linux command to explain.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The prompt template with the command inserted.</p> Source code in <code>peter_explains/prompts.py</code> <pre><code>def format(self, command: str) -&gt; str:\n    \"\"\"\n    Get the prompt template with the command inserted.\n\n    Args:\n        command (str): The Linux command to explain.\n\n    Returns:\n        str: The prompt template with the command inserted.\n    \"\"\"\n    return self.value.format(command=command)\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#how-to-use-this-pile-of-junk-peter-explains-linux-edition","title":"How to Use This Pile of Junk (Peter Explains Linux Edition)","text":"<p>Alright, so you actually installed this thing. Big whoop. If you think it'll be as enjoyable as a root canal, you're probably right. But hey, here's how to actually use it:</p>"},{"location":"usage/#the-basics-for-those-as-slow-as-chris","title":"The Basics (For Those as Slow as Chris)","text":"<p>To get an explanation for a Linux command, type <code>peter</code> followed by the command name. Like this:</p> <pre><code> $ peter grep\n</code></pre> <p>This will spit out some text that kinda-sorta explains what the <code>grep</code> command does, with a healthy dose of insults and comparisons to things even dumber than you are.</p>"},{"location":"usage/#getting-fancy-for-overachievers","title":"Getting Fancy (For Overachievers)","text":"<p>Saw linux command and wanna know what it does. Wrap it with those <code>\" \"</code> thingies after <code>peter</code>:</p> <pre><code>$ peter \"sudo rm -rf /\"\n</code></pre>"},{"location":"usage/#getting-help","title":"Getting Help","text":"<p>Use <code>--help</code> to display a list of all these amazing features (and to re-read the insults I wrote for ya).</p> <pre><code>$ peter --help\n</code></pre>"},{"location":"usage/#examples-because-even-i-cant-mess-these-up","title":"Examples (Because Even I Can't Mess These Up)","text":"<ul> <li> <p>Explaining a Command Without Any Arguments:</p> <p>Get Explanation for <code>ls</code></p> <p><pre><code>$ peter ls\n</code></pre> That gonna give you something like this: <pre><code>Purpose:\nYa, this one shows ya what's in a folder, if ya can make heads or tails of its weird output.\n\nSyntax:\nls [options] [folder]\n\nOptions:\n* -a: Shows ya all the files, even the ones that are hiding like sneaky lil' weasels.\n* -l: Details, details... gives ya more info than ya probably care about.\n\nExamples:\n* ls: Hey Lois, check this out! It's like an inventory of what's in this folder.\n* ls -a: Look Lois, it even found my secret stash of chocolate chip cookies! Where'd they come from?\n* ls /home/peter: Lois, quit hiding my bowling ball! I can see it right here in my home folder.\n</code></pre></p> </li> <li> <p>Explaining a Command With Any Arguments:</p> <p>Get Explanation for <code>sudo rm -rf /</code></p> <p><pre><code>$ peter \"sudo rm -rf /\"\n</code></pre> And you get something like... <pre><code>Command: sudo rm -rf /\n\nPurpose:\nOh my giddy aunt! This here command's gonna obliterate everything on your computer! It's like nuking your house to get rid of that pesky spider.\n\nBreakdown:\n* sudo: This tells your computer, 'Listen up, I'm the boss, do what I say.' It's like usin' your 'rents' credit card.\n* rm: This is the wrecking ball, the 'get rid of it' command.\n* -rf: These flags tell 'rm' to go crazy, like a Tasmanian devil on steroids. '-r' means recursive, diggin' into every nook and cranny, and '-f' means force, no askin' for permission.\n* /: This little fella means the root directory, the big boss of all directories. It's like sayin', 'Delete everythin' from the top down.'\n</code></pre></p> </li> </ul>"},{"location":"usage/#disclaimer-so-you-dont-sue-this-idiot","title":"Disclaimer (So You Don't Sue This Idiot)","text":"<p>I ain't responsible if this tool actually teaches you anything. Well, maybe you'll learn that I'm even dumber than you when it comes to this Linux stuff. And hey, if it blows up your computer, tough luck. You shoulda known better than to trust this thing in the first place.</p> <p>Now go on, try it out! See if you can figure out some of those complicated commands that have been hauntin' your nightmares (or maybe just how to delete this whole mess from your system).</p> <p>Let me know if you want me to include specific, tailored examples for common Linux commands!</p>"},{"location":"reference/api_key/","title":"API Key","text":""},{"location":"reference/api_key/#peter_explains.api_key.GoogleApiKey","title":"<code>GoogleApiKey</code>","text":"<p>This class provides methods to get and set the Google AI platform API key.</p> Source code in <code>peter_explains/api_key.py</code> <pre><code>class GoogleApiKey:\n    \"\"\"\n    This class provides methods to get and set the Google AI platform API key.\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        self.api_key_path = GoogleApiKey.get_api_ley_file_path()\n\n    @staticmethod\n    def get_api_ley_file_path() -&gt; str:\n        if os.name == \"nt\":\n            api_file_path = os.path.join(\n                os.getenv(\"LOCALAPPDATA\"), __app_name__, f\"{__app_name__}_api.json\"\n            )\n        elif os.name == \"posix\":\n            home = os.path.expanduser(\"~\")\n            if sys.platform == \"darwin\":\n                api_file_path = os.path.join(\n                    home,\n                    \"Library\",\n                    \"Application Support\",\n                    __app_name__,\n                    f\"{__app_name__}_api.json\",\n                )\n            else:\n                api_file_path = os.path.join(\n                    home, \".config\", __app_name__, f\"{__app_name__}_api.json\"\n                )\n\n        return api_file_path\n\n    def get(self) -&gt; str:\n        \"\"\"\n        Retrieves the API key from the specified file.\n\n        Returns:\n            str: The API key.\n\n        Raises:\n            FileNotFoundError: If the API key file does not exist.\n        \"\"\"\n        if not os.path.exists(self.api_key_path):\n            show_no_api_key_error()\n            sys.exit(1)\n\n        with open(self.api_key_path, \"r\", encoding=\"utf-8\") as file:\n            data = json.load(file)\n            return data[\"api_key\"]\n\n    def set(self, api_key: str):\n        \"\"\"\n        Sets the API key for the application.\n\n        Args:\n            api_key (str): The API key to be set.\n\n        Raises:\n            ValueError: If the length of the API key is less than 30 or greater than 50.\n\n        Returns:\n            None\n        \"\"\"\n        if len(api_key) &lt; 30 or len(api_key) &gt; 50:\n            show_crappy_api_key_error()\n            sys.exit(1)\n\n        with open(self.api_key_path, \"w\", encoding=\"utf-8\") as file:\n            json.dump({\"api_key\": api_key}, file)\n        show_api_key_success_message()\n        sys.exit(0)\n\n    def clear(self):\n        \"\"\"\n        This function clears the API key from the keyring.\n\n        Args:\n            None\n\n        Returns:\n            None\n        \"\"\"\n        os.remove(self.api_key_path)\n        print(\"Retep just deleted your API key. Loser!\")\n</code></pre>"},{"location":"reference/api_key/#peter_explains.api_key.GoogleApiKey.clear","title":"<code>clear()</code>","text":"<p>This function clears the API key from the keyring.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>peter_explains/api_key.py</code> <pre><code>def clear(self):\n    \"\"\"\n    This function clears the API key from the keyring.\n\n    Args:\n        None\n\n    Returns:\n        None\n    \"\"\"\n    os.remove(self.api_key_path)\n    print(\"Retep just deleted your API key. Loser!\")\n</code></pre>"},{"location":"reference/api_key/#peter_explains.api_key.GoogleApiKey.get","title":"<code>get()</code>","text":"<p>Retrieves the API key from the specified file.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The API key.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the API key file does not exist.</p> Source code in <code>peter_explains/api_key.py</code> <pre><code>def get(self) -&gt; str:\n    \"\"\"\n    Retrieves the API key from the specified file.\n\n    Returns:\n        str: The API key.\n\n    Raises:\n        FileNotFoundError: If the API key file does not exist.\n    \"\"\"\n    if not os.path.exists(self.api_key_path):\n        show_no_api_key_error()\n        sys.exit(1)\n\n    with open(self.api_key_path, \"r\", encoding=\"utf-8\") as file:\n        data = json.load(file)\n        return data[\"api_key\"]\n</code></pre>"},{"location":"reference/api_key/#peter_explains.api_key.GoogleApiKey.set","title":"<code>set(api_key)</code>","text":"<p>Sets the API key for the application.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The API key to be set.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the length of the API key is less than 30 or greater than 50.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>peter_explains/api_key.py</code> <pre><code>def set(self, api_key: str):\n    \"\"\"\n    Sets the API key for the application.\n\n    Args:\n        api_key (str): The API key to be set.\n\n    Raises:\n        ValueError: If the length of the API key is less than 30 or greater than 50.\n\n    Returns:\n        None\n    \"\"\"\n    if len(api_key) &lt; 30 or len(api_key) &gt; 50:\n        show_crappy_api_key_error()\n        sys.exit(1)\n\n    with open(self.api_key_path, \"w\", encoding=\"utf-8\") as file:\n        json.dump({\"api_key\": api_key}, file)\n    show_api_key_success_message()\n    sys.exit(0)\n</code></pre>"},{"location":"reference/args/","title":"Argument Parsing","text":""},{"location":"reference/args/#peter_explains.args.parse_arguments","title":"<code>parse_arguments()</code>","text":"<p>Parse command line arguments and return the command to be explained.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The command to be explained.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the help option is specified.</p> <code>SystemExit</code> <p>If the required argument is missing.</p> Source code in <code>peter_explains/args.py</code> <pre><code>def parse_arguments():\n    \"\"\"\n    Parse command line arguments and return the command to be explained.\n\n    Returns:\n        str: The command to be explained.\n\n    Raises:\n        SystemExit: If the help option is specified.\n        SystemExit: If the required argument is missing.\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Linux commands explained the Peter Griffin way. Seriously.\",\n        add_help=False,\n    )\n    parser.add_argument(\n        \"--version\", action=\"version\", version=f\"Peter Explains (peter) v{__version__}\"\n    )\n    parser.add_argument(\n        \"-h\",\n        \"--help\",\n        action=\"store_true\",\n        help=\"Display the help message\",\n    )\n\n    parser.add_argument(\n        \"--api\",\n        metavar=\"&lt;API_KEY&gt;\",\n        help=\"Set the Google AI platform API key\",\n    )\n\n    parser.add_argument(\n        \"--delete-api\",\n        action=\"store_true\",\n        help=\"Deletes the Google AI platform API key\",\n    )\n\n    # add --clear-cache argument to clear cache\n    parser.add_argument(\n        \"--delete-cache\",\n        action=\"store_true\",\n        help=\"Delete the cache\",\n    )\n\n    parser.add_argument(\"command\", nargs=\"?\", help=\"The command to be explained\")\n\n    args = parser.parse_args()\n\n    # Handle API key operations\n    google_api_key = GoogleApiKey()\n\n    if args.api:\n        google_api_key.set(args.api)\n        sys.exit(0)\n\n    if args.delete_api:\n        google_api_key.clear()\n        sys.exit(0)\n\n    # Handle cache operations\n    cache = PeterCache()\n\n    if args.delete_cache:\n        cache.clear()\n        sys.exit(0)\n\n    if args.help:\n        show_peter_help()\n        sys.exit(0)\n\n    # Handle missing required argument\n    if not args.command:\n        show_peter_help()\n        sys.exit(1)\n\n    else:\n        command = args.command.strip().lower()\n        return command\n</code></pre>"},{"location":"reference/cache/","title":"Caching","text":""},{"location":"reference/cache/#peter_explains.cache.PeterCache","title":"<code>PeterCache</code>","text":"<p>This class provides methods to interact with the cache for the Peter Explains CLI.</p> Source code in <code>peter_explains/cache.py</code> <pre><code>class PeterCache:\n    \"\"\"\n    This class provides methods to interact with the cache for the Peter Explains CLI.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes the PeterCache class.\n        \"\"\"\n        self.cache = Cache(self.get_cache_dir(__app_name__))\n\n    @staticmethod\n    def get_cache_dir(cache_dir_name: str) -&gt; str:\n        \"\"\"\n        This function gets the cache directory for the Peter Explains CLI based on the operating system.\n\n        Args:\n            cache_dir_name (str): The name of the Peter Explains CLI cache directory.\n\n        Returns:\n            cache_dir (str): The cache directory for the Peter Explains CLI.\n        \"\"\"\n        if os.name == \"nt\":\n            cache_dir = os.path.join(os.getenv(\"LOCALAPPDATA\"), cache_dir_name, \"cache\")\n        elif os.name == \"posix\":\n            home = os.path.expanduser(\"~\")\n            if sys.platform == \"darwin\":\n                cache_dir = os.path.join(\n                    home, \"Library\", \"Application Support\", cache_dir_name, \"cache\"\n                )\n            else:\n                cache_dir = os.path.join(home, \".config\", cache_dir_name, \"cache\")\n\n        return cache_dir\n\n    def __contains__(self, key):\n        \"\"\"\n        Check if the cache contains a specific key.\n\n        Args:\n            key: The key to check.\n\n        Returns:\n            True if the cache contains the key, False otherwise.\n        \"\"\"\n        return key in self.cache\n\n    def save(self, key: str, value: CommandExplanation | CommandExplanationWithArguments):\n        \"\"\"\n        Saves the given value in the cache with the specified key.\n\n        Args:\n            key (str): The key to associate with the value in the cache.\n            value (CommandExplanation | CommandExplanationWithArguments): The value to be saved in the cache.\n\n        Returns:\n            None\n        \"\"\"\n        self.cache[key] = value\n\n    def get(self, key) -&gt; CommandExplanation | CommandExplanationWithArguments | None:\n        \"\"\"\n        Retrieve the value associated with the given key from the cache.\n\n        Parameters:\n            key (any): The key to retrieve the value for.\n\n        Returns:\n            The value associated with the key, or None if the key is not found.\n        \"\"\"\n        return self.cache.get(key)\n\n    def delete(self, key):\n        \"\"\"\n        Deletes the specified key from the cache.\n\n        Args:\n            key: The key to be deleted from the cache.\n\n        Returns:\n            None\n        \"\"\"\n        del self.cache[key]\n\n    def clear(self):\n        \"\"\"\n        Clears the cache by removing all stored items.\n        \"\"\"\n        self.cache.clear()\n        print(\"A fresh new start! How 'bout that?\")\n</code></pre>"},{"location":"reference/cache/#peter_explains.cache.PeterCache.__contains__","title":"<code>__contains__(key)</code>","text":"<p>Check if the cache contains a specific key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>The key to check.</p> required <p>Returns:</p> Type Description <p>True if the cache contains the key, False otherwise.</p> Source code in <code>peter_explains/cache.py</code> <pre><code>def __contains__(self, key):\n    \"\"\"\n    Check if the cache contains a specific key.\n\n    Args:\n        key: The key to check.\n\n    Returns:\n        True if the cache contains the key, False otherwise.\n    \"\"\"\n    return key in self.cache\n</code></pre>"},{"location":"reference/cache/#peter_explains.cache.PeterCache.__init__","title":"<code>__init__()</code>","text":"<p>Initializes the PeterCache class.</p> Source code in <code>peter_explains/cache.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Initializes the PeterCache class.\n    \"\"\"\n    self.cache = Cache(self.get_cache_dir(__app_name__))\n</code></pre>"},{"location":"reference/cache/#peter_explains.cache.PeterCache.clear","title":"<code>clear()</code>","text":"<p>Clears the cache by removing all stored items.</p> Source code in <code>peter_explains/cache.py</code> <pre><code>def clear(self):\n    \"\"\"\n    Clears the cache by removing all stored items.\n    \"\"\"\n    self.cache.clear()\n    print(\"A fresh new start! How 'bout that?\")\n</code></pre>"},{"location":"reference/cache/#peter_explains.cache.PeterCache.delete","title":"<code>delete(key)</code>","text":"<p>Deletes the specified key from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>The key to be deleted from the cache.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>peter_explains/cache.py</code> <pre><code>def delete(self, key):\n    \"\"\"\n    Deletes the specified key from the cache.\n\n    Args:\n        key: The key to be deleted from the cache.\n\n    Returns:\n        None\n    \"\"\"\n    del self.cache[key]\n</code></pre>"},{"location":"reference/cache/#peter_explains.cache.PeterCache.get","title":"<code>get(key)</code>","text":"<p>Retrieve the value associated with the given key from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>any</code> <p>The key to retrieve the value for.</p> required <p>Returns:</p> Type Description <code>CommandExplanation | CommandExplanationWithArguments | None</code> <p>The value associated with the key, or None if the key is not found.</p> Source code in <code>peter_explains/cache.py</code> <pre><code>def get(self, key) -&gt; CommandExplanation | CommandExplanationWithArguments | None:\n    \"\"\"\n    Retrieve the value associated with the given key from the cache.\n\n    Parameters:\n        key (any): The key to retrieve the value for.\n\n    Returns:\n        The value associated with the key, or None if the key is not found.\n    \"\"\"\n    return self.cache.get(key)\n</code></pre>"},{"location":"reference/cache/#peter_explains.cache.PeterCache.get_cache_dir","title":"<code>get_cache_dir(cache_dir_name)</code>  <code>staticmethod</code>","text":"<p>This function gets the cache directory for the Peter Explains CLI based on the operating system.</p> <p>Parameters:</p> Name Type Description Default <code>cache_dir_name</code> <code>str</code> <p>The name of the Peter Explains CLI cache directory.</p> required <p>Returns:</p> Name Type Description <code>cache_dir</code> <code>str</code> <p>The cache directory for the Peter Explains CLI.</p> Source code in <code>peter_explains/cache.py</code> <pre><code>@staticmethod\ndef get_cache_dir(cache_dir_name: str) -&gt; str:\n    \"\"\"\n    This function gets the cache directory for the Peter Explains CLI based on the operating system.\n\n    Args:\n        cache_dir_name (str): The name of the Peter Explains CLI cache directory.\n\n    Returns:\n        cache_dir (str): The cache directory for the Peter Explains CLI.\n    \"\"\"\n    if os.name == \"nt\":\n        cache_dir = os.path.join(os.getenv(\"LOCALAPPDATA\"), cache_dir_name, \"cache\")\n    elif os.name == \"posix\":\n        home = os.path.expanduser(\"~\")\n        if sys.platform == \"darwin\":\n            cache_dir = os.path.join(\n                home, \"Library\", \"Application Support\", cache_dir_name, \"cache\"\n            )\n        else:\n            cache_dir = os.path.join(home, \".config\", cache_dir_name, \"cache\")\n\n    return cache_dir\n</code></pre>"},{"location":"reference/cache/#peter_explains.cache.PeterCache.save","title":"<code>save(key, value)</code>","text":"<p>Saves the given value in the cache with the specified key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to associate with the value in the cache.</p> required <code>value</code> <code>CommandExplanation | CommandExplanationWithArguments</code> <p>The value to be saved in the cache.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>peter_explains/cache.py</code> <pre><code>def save(self, key: str, value: CommandExplanation | CommandExplanationWithArguments):\n    \"\"\"\n    Saves the given value in the cache with the specified key.\n\n    Args:\n        key (str): The key to associate with the value in the cache.\n        value (CommandExplanation | CommandExplanationWithArguments): The value to be saved in the cache.\n\n    Returns:\n        None\n    \"\"\"\n    self.cache[key] = value\n</code></pre>"},{"location":"reference/format/","title":"Formatting Output","text":""},{"location":"reference/format/#peter_explains.format.pretty_print_result","title":"<code>pretty_print_result(result)</code>","text":"<p>Prints the command explanation or command explanation with arguments in a formatted manner.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>CommandExplanation | CommandExplanationWithArguments</code> <p>The result to be printed.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>peter_explains/format.py</code> <pre><code>def pretty_print_result(result: CommandExplanation | CommandExplanationWithArguments):\n    \"\"\"\n    Prints the command explanation or command explanation with arguments in a formatted manner.\n\n    Args:\n        result (CommandExplanation | CommandExplanationWithArguments): The result to be printed.\n\n    Returns:\n        None\n    \"\"\"\n    print(\n        Fore.CYAN\n        + \"\\nCommand: \"\n        + Style.RESET_ALL\n        + Style.BRIGHT\n        + result.command\n        + Style.RESET_ALL\n    )\n    print(Fore.YELLOW + \"\\nPurpose:\\n\" + Style.RESET_ALL + result.purpose)\n\n    if isinstance(result, CommandExplanation):\n        print(Fore.YELLOW + \"\\nSyntax:\" + Style.RESET_ALL)\n        print(Fore.LIGHTBLACK_EX + result.syntax + Style.RESET_ALL + \"\\n\")\n\n        print(Fore.YELLOW + \"Options:\" + Style.RESET_ALL)\n        for option in result.options:\n            print(Fore.BLUE + f\"* {option}\" + Style.RESET_ALL)\n\n        print(Fore.YELLOW + \"\\nExamples:\" + Style.RESET_ALL)\n        for example in result.examples:\n            print(Fore.GREEN + \"* \" + example + Style.RESET_ALL)\n\n    elif isinstance(result, CommandExplanationWithArguments):\n        print(Fore.YELLOW + \"\\nBreakdown:\" + Style.RESET_ALL)\n        for explanation in result.breakdown:\n            print(Fore.GREEN + f\"* {explanation}\" + Style.RESET_ALL)\n</code></pre>"},{"location":"reference/main/","title":"Main","text":""},{"location":"reference/main/#peter_explains.main.main","title":"<code>main()</code>  <code>async</code>","text":"<p>Main function to run the Peter Explains CLI.</p> <p>This function is an async function that runs the main Peter Explains CLI. It uses the asyncio library to run the main Peter Explains CLI.</p> Source code in <code>peter_explains/main.py</code> <pre><code>async def main():\n    \"\"\"\n    Main function to run the Peter Explains CLI.\n\n    This function is an async function that runs the main Peter Explains CLI.\n    It uses the asyncio library to run the main Peter Explains CLI.\n    \"\"\"\n\n    try:\n        command = parse_arguments()\n        peter_ai = PeterAi(model_name=\"gemini-pro\")\n        cache = PeterCache()\n\n        result = None\n\n        if command in cache:  # Check in cache\n            result = cache.get(command)\n\n        else:\n            tasks = [\n                asyncio.create_task(show_loading_message()),\n                asyncio.create_task(peter_ai.explain_command(command)),\n            ]\n            done, pending = await asyncio.wait(\n                tasks, return_when=asyncio.FIRST_COMPLETED\n            )\n\n            pending.pop().cancel()  # Cancel the loading message task\n            result = done.pop().result()  # Get the result of the explain_command task\n\n            cache.save(command, result)  # Save in cache\n\n        pretty_print_result(result)\n\n    except Exception as e:\n        show_error_message(e)\n</code></pre>"},{"location":"reference/main/#peter_explains.main.peter","title":"<code>peter()</code>","text":"<p>Function to run the Peter Explains CLI.</p> <p>This function is the entry point for the Peter Explains CLI. It runs the main function using the asyncio library.</p> Source code in <code>peter_explains/main.py</code> <pre><code>def peter():\n    \"\"\"\n    Function to run the Peter Explains CLI.\n\n    This function is the entry point for the Peter Explains CLI.\n    It runs the main function using the asyncio library.\n    \"\"\"\n    asyncio.run(main())\n</code></pre>"},{"location":"reference/messages/","title":"Messages","text":""},{"location":"reference/messages/#peter_explains.messages.ErrorMessage","title":"<code>ErrorMessage</code>","text":"<p>Class to store error messages for the Peter Explains CLI.</p> Source code in <code>peter_explains/messages.py</code> <pre><code>class ErrorMessage:\n    \"\"\"\n    Class to store error messages for the Peter Explains CLI.\n    \"\"\"\n\n    MESSAGES = [\n        \"Aw crap, somethin' broke. Typical. Maybe Meg stepped on the keyboard again.\",\n        \"Hey, if this thing gives ya the wrong answer, don't blame me. I'm just the idiot typin' stuff in.\",\n        \"Alright, this might take longer than I thought. You got any beer in the fridge?\",\n        \"Ugh, somethin' ain't right. Maybe I shoulda paid more attention to that computer class in high school.\",\n        \"Aw jeez, I think I broke it. Don't tell Lois, she'll make me fix it.\",\n        \"I swear, this thing's got more bugs than the Griffin house. And that's sayin' somethin'.\",\n    ]\n\n    @staticmethod\n    def get_random_message() -&gt; str:\n        \"\"\"\n        Returns a random error message from the list of error messages.\n\n        Returns:\n            str: A random error message.\n        \"\"\"\n        return random.choice(ErrorMessage.MESSAGES)\n</code></pre>"},{"location":"reference/messages/#peter_explains.messages.ErrorMessage.get_random_message","title":"<code>get_random_message()</code>  <code>staticmethod</code>","text":"<p>Returns a random error message from the list of error messages.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A random error message.</p> Source code in <code>peter_explains/messages.py</code> <pre><code>@staticmethod\ndef get_random_message() -&gt; str:\n    \"\"\"\n    Returns a random error message from the list of error messages.\n\n    Returns:\n        str: A random error message.\n    \"\"\"\n    return random.choice(ErrorMessage.MESSAGES)\n</code></pre>"},{"location":"reference/messages/#peter_explains.messages.LoadingMessage","title":"<code>LoadingMessage</code>","text":"<p>Class to store loading messages for the Peter Explains CLI.</p> Source code in <code>peter_explains/messages.py</code> <pre><code>class LoadingMessage:\n    \"\"\"\n    Class to store loading messages for the Peter Explains CLI.\n    \"\"\"\n\n    MESSAGES = [\n        \"Hang on, Lois, I'm tryin' to think here. This is harder than figuring out what's goin' on in Stewie's head.\",\n        \"Jeez, this computer's slower than Quagmire after a night at The Clam.\",\n        \"Ugh, I swear this thing gets dumber every day. It's like talkin' to Brian...\",\n        \"Hold your horses! I'm workin' on it... kinda.\",\n        \"Aw jeez, is this thing even plugged in? Meg wouldn't know the difference.\",\n        \"C'mon, you pile of junk! I bet even Chris could figure this out faster...\",\n        \"Alright, alright, I'm thinkin'... Thinkin' about how much better a cold beer would be right now.\",\n        \"This is takin' longer than waitin' in line at the DMV. And that place smells better.\",\n        \"Hey, if I don't figure this out soon, the freakin' TV guide's gonna be outdated.\",\n    ]\n\n    @staticmethod\n    def get_random_message() -&gt; str:\n        \"\"\"\n        Returns a random message from the available messages.\n\n        Returns:\n            str: A random message.\n        \"\"\"\n        return random.choice(LoadingMessage.MESSAGES)\n</code></pre>"},{"location":"reference/messages/#peter_explains.messages.LoadingMessage.get_random_message","title":"<code>get_random_message()</code>  <code>staticmethod</code>","text":"<p>Returns a random message from the available messages.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A random message.</p> Source code in <code>peter_explains/messages.py</code> <pre><code>@staticmethod\ndef get_random_message() -&gt; str:\n    \"\"\"\n    Returns a random message from the available messages.\n\n    Returns:\n        str: A random message.\n    \"\"\"\n    return random.choice(LoadingMessage.MESSAGES)\n</code></pre>"},{"location":"reference/peter_ai/","title":"Peter Griffin AI","text":""},{"location":"reference/peter_ai/#peter_explains.peter_ai.PeterAi","title":"<code>PeterAi</code>","text":"<p>This class provides methods to explain Linux commands using the Google Generative AI model.</p> Source code in <code>peter_explains/peter_ai.py</code> <pre><code>class PeterAi:\n    \"\"\"\n    This class provides methods to explain Linux commands using the Google Generative AI model.\n    \"\"\"\n\n    def __init__(self, model_name: str = \"gemini-pro\"):\n        \"\"\"\n        Initialize the PeterAi class with the specified model.\n\n        Args:\n        - model_name (str): The name of the model to use for explaining Linux commands.\n\n        Returns:\n        - None\n        \"\"\"\n        api_key = GoogleApiKey().get()\n        self.safety_settings = [\n            {\n                \"category\": \"HARM_CATEGORY_DANGEROUS\",\n                \"threshold\": \"BLOCK_NONE\",\n            },\n            {\n                \"category\": \"HARM_CATEGORY_HARASSMENT\",\n                \"threshold\": \"BLOCK_NONE\",\n            },\n            {\n                \"category\": \"HARM_CATEGORY_HATE_SPEECH\",\n                \"threshold\": \"BLOCK_NONE\",\n            },\n            {\n                \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n                \"threshold\": \"BLOCK_NONE\",\n            },\n            {\n                \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n                \"threshold\": \"BLOCK_NONE\",\n            },\n            {\n                \"category\": \"HARM_CATEGORY_SEXUAL\",\n                \"threshold\": \"BLOCK_NONE\",\n            },\n            # TODO: Uncomment the following lines to enable additional safety settings\n            # {\n            #     \"category\": \"HARM_CATEGORY_DEROGATORY\",\n            #     \"threshold\": \"BLOCK_NONE\",\n            # },\n            # {\n            #     \"category\": \"HARM_CATEGORY_MEDICAL\",\n            #     \"threshold\": \"BLOCK_NONE\",\n            # },\n            # {\n            #     \"category\": \"HARM_CATEGORY_VIOLENCE\",\n            #     \"threshold\": \"BLOCK_NONE\",\n            # },\n            # {\n            #     \"category\": \"HARM_CATEGORY_TOXICITY\",\n            #     \"threshold\": \"BLOCK_NONE\",\n            # },\n        ]\n        genai.configure(transport=\"grpc_asyncio\", api_key=api_key)\n        self.model = genai.GenerativeModel(\n            model_name, safety_settings=self.safety_settings\n        )\n\n    async def explain_command(\n        self, command: str\n    ) -&gt; CommandExplanation | CommandExplanationWithArguments:\n        \"\"\"\n        Explain a Linux command in a JSON format suitable for use in a command-line tool.\n\n        This function uses the Google Generative AI model to explain a Linux command in a JSON format suitable for use in a command-line tool. It takes a Linux command as input and returns a JSON object with the following keys:\n        &gt; command_name: The name of the Linux command\n        &gt; purpose: A short, funny explanation of its purpose in Peter Griffin's voice.\n        &gt; syntax: Basic command structure with optional placeholders for arguments (e.g., \"command_name [options] &lt;file_or_directory&gt;\")\n        &gt; options: A few common options. Provide brief, humorous explanations for each.\n        &gt; examples: 2-3 examples demonstrating the command's usage. Keep it simple and funny!\n\n        Args:\n            command (str): The Linux command to explain.\n\n        Returns:\n            CommandExplanation | CommandExplanationWithArguments: The explanation of the Linux command.\n        \"\"\"\n\n        result = None\n        if \" \" in command:  # Check if command includes arguments\n            prompt = PromptType.WITH_ARGUMENTS.format(command=command)\n            response = await self.model.generate_content_async(\n                prompt, safety_settings=self.safety_settings\n            )\n            result = CommandExplanationWithArguments.from_response(response.text)\n        else:\n            prompt = PromptType.WITHOUT_ARGUMENTS.format(command=command)\n            response = await self.model.generate_content_async(\n                prompt, safety_settings=self.safety_settings\n            )\n            result = CommandExplanation.from_response(response.text)\n        return result\n</code></pre>"},{"location":"reference/peter_ai/#peter_explains.peter_ai.PeterAi.__init__","title":"<code>__init__(model_name='gemini-pro')</code>","text":"<p>Initialize the PeterAi class with the specified model.</p> <p>Args: - model_name (str): The name of the model to use for explaining Linux commands.</p> <p>Returns: - None</p> Source code in <code>peter_explains/peter_ai.py</code> <pre><code>def __init__(self, model_name: str = \"gemini-pro\"):\n    \"\"\"\n    Initialize the PeterAi class with the specified model.\n\n    Args:\n    - model_name (str): The name of the model to use for explaining Linux commands.\n\n    Returns:\n    - None\n    \"\"\"\n    api_key = GoogleApiKey().get()\n    self.safety_settings = [\n        {\n            \"category\": \"HARM_CATEGORY_DANGEROUS\",\n            \"threshold\": \"BLOCK_NONE\",\n        },\n        {\n            \"category\": \"HARM_CATEGORY_HARASSMENT\",\n            \"threshold\": \"BLOCK_NONE\",\n        },\n        {\n            \"category\": \"HARM_CATEGORY_HATE_SPEECH\",\n            \"threshold\": \"BLOCK_NONE\",\n        },\n        {\n            \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n            \"threshold\": \"BLOCK_NONE\",\n        },\n        {\n            \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n            \"threshold\": \"BLOCK_NONE\",\n        },\n        {\n            \"category\": \"HARM_CATEGORY_SEXUAL\",\n            \"threshold\": \"BLOCK_NONE\",\n        },\n        # TODO: Uncomment the following lines to enable additional safety settings\n        # {\n        #     \"category\": \"HARM_CATEGORY_DEROGATORY\",\n        #     \"threshold\": \"BLOCK_NONE\",\n        # },\n        # {\n        #     \"category\": \"HARM_CATEGORY_MEDICAL\",\n        #     \"threshold\": \"BLOCK_NONE\",\n        # },\n        # {\n        #     \"category\": \"HARM_CATEGORY_VIOLENCE\",\n        #     \"threshold\": \"BLOCK_NONE\",\n        # },\n        # {\n        #     \"category\": \"HARM_CATEGORY_TOXICITY\",\n        #     \"threshold\": \"BLOCK_NONE\",\n        # },\n    ]\n    genai.configure(transport=\"grpc_asyncio\", api_key=api_key)\n    self.model = genai.GenerativeModel(\n        model_name, safety_settings=self.safety_settings\n    )\n</code></pre>"},{"location":"reference/peter_ai/#peter_explains.peter_ai.PeterAi.explain_command","title":"<code>explain_command(command)</code>  <code>async</code>","text":"<p>Explain a Linux command in a JSON format suitable for use in a command-line tool.</p> <p>This function uses the Google Generative AI model to explain a Linux command in a JSON format suitable for use in a command-line tool. It takes a Linux command as input and returns a JSON object with the following keys:</p> <p>command_name: The name of the Linux command purpose: A short, funny explanation of its purpose in Peter Griffin's voice. syntax: Basic command structure with optional placeholders for arguments (e.g., \"command_name [options] \") options: A few common options. Provide brief, humorous explanations for each. examples: 2-3 examples demonstrating the command's usage. Keep it simple and funny! <p>Parameters:</p> Name Type Description Default <code>command</code> <code>str</code> <p>The Linux command to explain.</p> required <p>Returns:</p> Type Description <code>CommandExplanation | CommandExplanationWithArguments</code> <p>CommandExplanation | CommandExplanationWithArguments: The explanation of the Linux command.</p> Source code in <code>peter_explains/peter_ai.py</code> <pre><code>async def explain_command(\n    self, command: str\n) -&gt; CommandExplanation | CommandExplanationWithArguments:\n    \"\"\"\n    Explain a Linux command in a JSON format suitable for use in a command-line tool.\n\n    This function uses the Google Generative AI model to explain a Linux command in a JSON format suitable for use in a command-line tool. It takes a Linux command as input and returns a JSON object with the following keys:\n    &gt; command_name: The name of the Linux command\n    &gt; purpose: A short, funny explanation of its purpose in Peter Griffin's voice.\n    &gt; syntax: Basic command structure with optional placeholders for arguments (e.g., \"command_name [options] &lt;file_or_directory&gt;\")\n    &gt; options: A few common options. Provide brief, humorous explanations for each.\n    &gt; examples: 2-3 examples demonstrating the command's usage. Keep it simple and funny!\n\n    Args:\n        command (str): The Linux command to explain.\n\n    Returns:\n        CommandExplanation | CommandExplanationWithArguments: The explanation of the Linux command.\n    \"\"\"\n\n    result = None\n    if \" \" in command:  # Check if command includes arguments\n        prompt = PromptType.WITH_ARGUMENTS.format(command=command)\n        response = await self.model.generate_content_async(\n            prompt, safety_settings=self.safety_settings\n        )\n        result = CommandExplanationWithArguments.from_response(response.text)\n    else:\n        prompt = PromptType.WITHOUT_ARGUMENTS.format(command=command)\n        response = await self.model.generate_content_async(\n            prompt, safety_settings=self.safety_settings\n        )\n        result = CommandExplanation.from_response(response.text)\n    return result\n</code></pre>"},{"location":"reference/prompts/","title":"Prompts","text":""},{"location":"reference/prompts/#peter_explains.prompts.PromptType","title":"<code>PromptType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Enum class representing different types of prompts for explaining Linux commands.</p> <p>Attributes:</p> Name Type Description <code>WITHOUT_ARGUMENTS</code> <p>Prompt type for explaining a Linux command without arguments.</p> <code>WITH_ARGUMENTS</code> <p>Prompt type for explaining a Linux command with arguments.</p> Source code in <code>peter_explains/prompts.py</code> <pre><code>class PromptType(Enum):\n    \"\"\"\n    Enum class representing different types of prompts for explaining Linux commands.\n\n    Attributes:\n        WITHOUT_ARGUMENTS: Prompt type for explaining a Linux command without arguments.\n        WITH_ARGUMENTS: Prompt type for explaining a Linux command with arguments.\n    \"\"\"\n\n    WITHOUT_ARGUMENTS = \"\"\"\n    **Task:** Explain the Linux command in a JSON format suitable for use in a command-line tool. Don't forget to escape characters like 'backspace' whenever necessary. Remember, this is for a humorous tool with Peter Griffin-like explanations, so be creative and casual!\n\n    **Input:** {command}\n\n    **Output:** A JSON object with the following keys:\n\n    * **command_name:** The name of the Linux command  \n    * **purpose:**  A short, funny explanation of its purpose in Peter Griffin's voice.\n    * **syntax:** Basic command structure with optional placeholders for arguments (e.g., \"command_name [options] &lt;file_or_directory&gt;\")\n    * **options:** A few common options. Provide brief, humorous explanations for each. \n    * **examples:** 2-3 examples demonstrating the command's usage. Keep it simple and funny!\n\n    **Schema of the Output:**\n    {{\n    \"command_name\": str,\n    \"purpose\": str,\n    \"options\": list[str],\n    \"examples\": list[str]\n    }}\n\n    **Example Output (for the 'ls' command):**\n\n    {{\n    \"command_name\": \"ls\",\n    \"purpose\": \"This thing's supposed to show ya what's in a folder, but half the time it lists stuff I ain't never even heard of.\",  \n    \"syntax\": \"ls [options] [path]\",\n    \"options\": [\n        \"-a: Shows ya even the sneaky files tryin' to hide.\",\n        \"-l: Details, details... gives ya more info than ya probably wanted.\" \n    ],\n    \"examples\": [\n        \"ls: Shows me what's in the current folder. Giggity!\", \n        \"ls -la: Shows me everything in the current folder, even the hidden stuff. Lois, have you seen my missing sock anywhere?\",\n        \"ls /home/peter: Shows me what's in my home folder. Lois, where's the remote? I can't find it!\"   \n    ]\n    }}\n    \"\"\"\n\n    WITH_ARGUMENTS = \"\"\"\n    **Task:** Explain the Linux command with arguments in a JSON format suitable for use in a command-line tool. Don't forget to escape characters like 'backspace' whenever necessary. Explain the purpose of the command and what each part does.  Remember, this is for a humorous tool with Peter Griffin-like explanations, so be creative and casual!\n\n    **Input:** {command}\n\n    **Output:** A JSON object with the following keys:\n\n    * **command_name:** The name of the Linux command  \n    * **purpose:**  A short, funny explanation of the overall purpose of the command with the arguments in Peter Griffin's voice.  \n    * **breakdown:** A list of explanations for each part of the command (including arguments): \n        * Each item should have a key indicating the specific part (e.g., \"tar\", \"-x\", \"v\", \"f\") and a value with its explanation.\n\n    **Schema of the Output:**\n    {{\n    \"command_name\": str,\n    \"purpose\": str,\n    \"breakdown\": list[str]\n    }}    \n\n    **Example Output (for the 'tar -xvf file.xz' command):**\n\n    {{\n    \"command_name\": \"tar\",\n    \"purpose\": \"Alright, this command's here to unpack somethin'. The '-x' means extract, '-v' is for verbose mode, like seein' everythin' that happens, and 'f' is for specifyin' the file. In this case, 'file.xz' is probably somethin' compressed with xz.\",  \n    \"breakdown\": [\n        \"tar: This is the main command, the ring leader for unpackin' things.\",\n        \"-x: This flag tells 'tar' to extract somethin', like openin' up a present.\",\n        \"-v: Verbose mode, like turnin' on the commentary for unpackin'.  More details than ya might need.\",\n        \"-f: This flag tells 'tar' which file to use, like pointin' at the right present.\",\n        \"file.xz: This is the actual file you wanna unpack, probably somethin' compressed with xz.\"\n    ]\n    }}\n    \"\"\"\n\n    def format(self, command: str) -&gt; str:\n        \"\"\"\n        Get the prompt template with the command inserted.\n\n        Args:\n            command (str): The Linux command to explain.\n\n        Returns:\n            str: The prompt template with the command inserted.\n        \"\"\"\n        return self.value.format(command=command)\n</code></pre>"},{"location":"reference/prompts/#peter_explains.prompts.PromptType.format","title":"<code>format(command)</code>","text":"<p>Get the prompt template with the command inserted.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>str</code> <p>The Linux command to explain.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The prompt template with the command inserted.</p> Source code in <code>peter_explains/prompts.py</code> <pre><code>def format(self, command: str) -&gt; str:\n    \"\"\"\n    Get the prompt template with the command inserted.\n\n    Args:\n        command (str): The Linux command to explain.\n\n    Returns:\n        str: The prompt template with the command inserted.\n    \"\"\"\n    return self.value.format(command=command)\n</code></pre>"},{"location":"reference/schema/","title":"Schema","text":""},{"location":"reference/schema/#peter_explains.schema.CommandExplanation","title":"<code>CommandExplanation</code>  <code>dataclass</code>","text":"<p>Represents a command explanation.</p> <p>Attributes:</p> Name Type Description <code>command</code> <code>str</code> <p>The command name.</p> <code>purpose</code> <code>str</code> <p>The purpose of the command.</p> <code>syntax</code> <code>str</code> <p>The syntax of the command.</p> <code>options</code> <code>list[str]</code> <p>The available options for the command.</p> <code>examples</code> <code>list[str]</code> <p>Examples of how to use the command.</p> Source code in <code>peter_explains/schema.py</code> <pre><code>@dataclasses.dataclass\nclass CommandExplanation:\n    \"\"\"\n    Represents a command explanation.\n\n    Attributes:\n        command (str): The command name.\n        purpose (str): The purpose of the command.\n        syntax (str): The syntax of the command.\n        options (list[str]): The available options for the command.\n        examples (list[str]): Examples of how to use the command.\n\n    \"\"\"\n\n    command: str\n    purpose: str\n    syntax: str\n    options: list[str]\n    examples: list[str]\n\n    @staticmethod\n    def from_response(response: str) -&gt; \"CommandExplanation\":\n        \"\"\"\n        Creates a CommandExplanation object from a response string.\n\n        Args:\n            response (str): The response string containing the command explanation data.\n\n        Returns:\n            CommandExplanation: The CommandExplanation object created from the response.\n\n        \"\"\"\n        json_body = response[response.find(\"{\") : response.rfind(\"}\") + 1]\n        data = json_repair.loads(json_body)\n        return CommandExplanation(\n            command=data[\"command_name\"],\n            purpose=data[\"purpose\"],\n            syntax=data[\"syntax\"],\n            options=data[\"options\"],\n            examples=data[\"examples\"],\n        )\n</code></pre>"},{"location":"reference/schema/#peter_explains.schema.CommandExplanation.from_response","title":"<code>from_response(response)</code>  <code>staticmethod</code>","text":"<p>Creates a CommandExplanation object from a response string.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>str</code> <p>The response string containing the command explanation data.</p> required <p>Returns:</p> Name Type Description <code>CommandExplanation</code> <code>CommandExplanation</code> <p>The CommandExplanation object created from the response.</p> Source code in <code>peter_explains/schema.py</code> <pre><code>@staticmethod\ndef from_response(response: str) -&gt; \"CommandExplanation\":\n    \"\"\"\n    Creates a CommandExplanation object from a response string.\n\n    Args:\n        response (str): The response string containing the command explanation data.\n\n    Returns:\n        CommandExplanation: The CommandExplanation object created from the response.\n\n    \"\"\"\n    json_body = response[response.find(\"{\") : response.rfind(\"}\") + 1]\n    data = json_repair.loads(json_body)\n    return CommandExplanation(\n        command=data[\"command_name\"],\n        purpose=data[\"purpose\"],\n        syntax=data[\"syntax\"],\n        options=data[\"options\"],\n        examples=data[\"examples\"],\n    )\n</code></pre>"},{"location":"reference/schema/#peter_explains.schema.CommandExplanationWithArguments","title":"<code>CommandExplanationWithArguments</code>  <code>dataclass</code>","text":"<p>Represents a command explanation with arguments.</p> <p>Attributes:</p> Name Type Description <code>command</code> <code>str</code> <p>The command name.</p> <code>purpose</code> <code>str</code> <p>The purpose of the command.</p> <code>breakdown</code> <code>list[str]</code> <p>The breakdown of the command.</p> Source code in <code>peter_explains/schema.py</code> <pre><code>@dataclasses.dataclass\nclass CommandExplanationWithArguments:\n    \"\"\"\n    Represents a command explanation with arguments.\n\n    Attributes:\n        command (str): The command name.\n        purpose (str): The purpose of the command.\n        breakdown (list[str]): The breakdown of the command.\n\n    \"\"\"\n\n    command: str\n    purpose: str\n    breakdown: list[str]\n\n    @staticmethod\n    def from_response(response: str) -&gt; \"CommandExplanationWithArguments\":\n        \"\"\"\n        Creates a CommandExplanationWithArguments object from a response string.\n\n        Args:\n            response (str): The response string containing the command explanation data.\n\n        Returns:\n            CommandExplanationWithArguments: The CommandExplanationWithArguments object created from the response.\n\n        \"\"\"\n        json_body = response[response.find(\"{\") : response.rfind(\"}\") + 1]\n        data = json_repair.loads(json_body)\n        return CommandExplanationWithArguments(\n            command=data[\"command_name\"],\n            purpose=data[\"purpose\"],\n            breakdown=data[\"breakdown\"],\n        )\n</code></pre>"},{"location":"reference/schema/#peter_explains.schema.CommandExplanationWithArguments.from_response","title":"<code>from_response(response)</code>  <code>staticmethod</code>","text":"<p>Creates a CommandExplanationWithArguments object from a response string.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>str</code> <p>The response string containing the command explanation data.</p> required <p>Returns:</p> Name Type Description <code>CommandExplanationWithArguments</code> <code>CommandExplanationWithArguments</code> <p>The CommandExplanationWithArguments object created from the response.</p> Source code in <code>peter_explains/schema.py</code> <pre><code>@staticmethod\ndef from_response(response: str) -&gt; \"CommandExplanationWithArguments\":\n    \"\"\"\n    Creates a CommandExplanationWithArguments object from a response string.\n\n    Args:\n        response (str): The response string containing the command explanation data.\n\n    Returns:\n        CommandExplanationWithArguments: The CommandExplanationWithArguments object created from the response.\n\n    \"\"\"\n    json_body = response[response.find(\"{\") : response.rfind(\"}\") + 1]\n    data = json_repair.loads(json_body)\n    return CommandExplanationWithArguments(\n        command=data[\"command_name\"],\n        purpose=data[\"purpose\"],\n        breakdown=data[\"breakdown\"],\n    )\n</code></pre>"},{"location":"reference/utils/","title":"Utils","text":""},{"location":"reference/utils/#peter_explains.utils.show_api_key_success_message","title":"<code>show_api_key_success_message()</code>","text":"<p>Displays a success message after the API key is successfully generated.</p> Source code in <code>peter_explains/utils.py</code> <pre><code>def show_api_key_success_message():\n    \"\"\"\n    Displays a success message after the API key is successfully generated.\n    \"\"\"\n    print(Fore.CYAN + \"There ya go! I knew you're gonna make it.\" + Style.RESET_ALL)\n</code></pre>"},{"location":"reference/utils/#peter_explains.utils.show_error_message","title":"<code>show_error_message(e)</code>","text":"<p>Show an error message when the Peter Explains CLI encounters an error.</p> <p>Parameters:</p> Name Type Description Default <code>e</code> <code>Exception</code> <p>The exception that was raised.</p> required Source code in <code>peter_explains/utils.py</code> <pre><code>def show_error_message(e: Exception):\n    \"\"\"\n    Show an error message when the Peter Explains CLI encounters an error.\n\n    Args:\n        e (Exception): The exception that was raised.\n    \"\"\"\n    print(Fore.RED + ErrorMessage.get_random_message() + Style.RESET_ALL)\n    print(Fore.CYAN + \"\\nFor yo nerds...\\n\" + \"-\" * 15 + Style.RESET_ALL)\n    print(e)\n</code></pre>"},{"location":"reference/utils/#peter_explains.utils.show_loading_message","title":"<code>show_loading_message()</code>  <code>async</code>","text":"<p>Show a loading message while the Peter Explains CLI is running.</p> <p>This function uses the asyncio library to show a loading message while the Peter Explains CLI is running.</p> Source code in <code>peter_explains/utils.py</code> <pre><code>async def show_loading_message():\n    \"\"\"\n    Show a loading message while the Peter Explains CLI is running.\n\n    This function uses the asyncio library to show a loading message while the Peter Explains CLI is running.\n    \"\"\"\n    for _ in range(10):\n        await asyncio.sleep(3.0)\n        print(LoadingMessage.get_random_message())\n\n    print(\"Peter's takin' too long. He's probably watchin' TV or somethin'.\")\n    sys.exit(0)\n</code></pre>"},{"location":"reference/utils/#peter_explains.utils.show_no_api_key_error","title":"<code>show_no_api_key_error()</code>","text":"<p>Function to display a message when the API key is missing.</p> Source code in <code>peter_explains/utils.py</code> <pre><code>def show_no_api_key_error():\n    \"\"\"\n    Function to display a message when the API key is missing.\n    \"\"\"\n    print(\n        Fore.CYAN\n        + \"Aw, c'mon! Where's the freakin' API key? You think this thing works by magic?\"\n        + Style.RESET_ALL\n    )\n    print(Fore.YELLOW + \"\\nAlright, numbskull, listen up:\" + Style.RESET_ALL)\n    print(\n        f\"1. Go to this fancy website: {Fore.LIGHTBLUE_EX}{'https://aistudio.google.com/app/'}{Style.RESET_ALL}\"\n    )\n    print(\"2. Get yourself one of those API key thingies.\")\n    print(\n        f\"3. Then you gotta run {Fore.LIGHTBLUE_EX}peter --api &lt;YOUR KEY&gt;{Style.RESET_ALL}. Don't screw it up.\"\n    )\n    print(\"4. (Important) Tell Meg to Shut Up!\")\n    print(\n        Fore.YELLOW + \"Got all that? Now go do it right this time!\\n\" + Style.RESET_ALL\n    )\n</code></pre>"},{"location":"reference/utils/#peter_explains.utils.show_peter_help","title":"<code>show_peter_help()</code>","text":"<p>Display the help message for the Peter Explains CLI.</p> <p>This function displays the help message for the Peter Explains CLI.</p> Source code in <code>peter_explains/utils.py</code> <pre><code>def show_peter_help():\n    \"\"\"\n    Display the help message for the Peter Explains CLI.\n\n    This function displays the help message for the Peter Explains CLI.\n    \"\"\"\n    print(Fore.CYAN + \"\\nPeter Explains Linux (kinda)\" + Style.RESET_ALL)\n    print(\n        Fore.LIGHTBLACK_EX\n        + \"Hey numbnuts, looks like you need help figurin' out this thing. Here's the deal:\\n\"\n        + Style.RESET_ALL\n    )\n\n    print(Fore.YELLOW + \"How to Use This Pile of Junk:\" + Style.RESET_ALL)\n    print(\n        \"* Type 'peter' and then the name of that Linux thing you need explanation for.\\nLike, 'peter ls' or whatever.\"\n    )\n    print(\n        '* Saw a fancy Linux command and don\\'t know what it does? \\nType it inside \" \" like \\'peter \"grep hello world.txt\"\\' \\n'\n    )\n\n    print(Fore.YELLOW + \"Other Useless Crap:\" + Style.RESET_ALL)\n    print(\n        Fore.GREEN\n        + \"* --api [API_KEY]: Gotta do it before doin anythihg stupid.\"\n        + Style.RESET_ALL\n    )\n    print(\"* --delete-api: Screwd up API key? Go remove it it with this. You're welcome.\")\n    print(\"* --delete-cache: Wanna start fresh? Try this one.\")\n    print(\"* --help: Yeah, yeah, that's what you're lookin' at right now, genius.\")\n    print(\n        \"* --version: Who cares what version this is?  It ain't gonna work right anyway.\\n\"\n    )\n</code></pre>"}]}